renv::status()
renv::snapshot()
knitr::opts_chunk$set(echo = TRUE)
data.list <- read_rds("output/seurat/SeuratList_RerunDKCC.rds")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyverse)
.libPaths()
renv::deactivate()
renv::init()
?renv::dependencies
renv::init()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(Seurat)
data.list <- read_rds("output/seurat/SeuratList_RerunDKCC.rds")
data.list <- read_rds("output/seurat/SeuratList_RerunDKCC.rds")
data.list <- read_rds(here::here("output/seurat/SeuratList_RerunDKCC.rds"))
data.list <- readRDS("/group/kidn1/Group-Little_MCRI/People/Sean/PhD/R-projects/kidney_classification_modelling/output/seurat/SeuratList_RerunDKCC.rds")
Harder_2019_Organoids <- readRDS("/group/kidn1/Group-Little_MCRI/People/Sean/PhD/R-projects/kidney_classification_modelling/output/seurat/Harder_2019_Organoids.rds")
library(Seurat)
library(Seurat)
library(tidyverse)
phipson <- read_rds("output/seurat/2019_Organoids.rds")
seurat.list <- list(wu = read_rds("output/seurat/Wu_2018_Organoids.rds"),
cz = read_rds("output/seurat/Czerniecki_2018_Organoids.rds"),
howden = read_rds("output/seurat/Howden_2019_Organoids.rds"),
phipson = phipson[, phipson$sample.id != "Ku_D25"],
harder = read_rds("output/seurat/Harder_2019_Organoids.rds"),
subramanian = read_rds("output/seurat/Subramanian_2019_Organoids.rds"),
low = read_rds("output/seurat/Low_2019_Organoids.rds"),
kumar = phipson[, phipson$sample.id == "Ku_D25"],
tran = read_rds("output/seurat/Tran_2019_Organoids.rds"),
lvh = read_rds("output/seurat/LVH_2020_Organoids.rds"),
hw = read_rds("output/seurat/HowdenWilson_2020_UrEpCulture.rds"),
mae = read_rds("output/seurat/Mae_2020_Diff_UE.rds"))
seurat.list$howden$protocol <- "Takasato"
seurat.list$howden$protocol <- "Takasato"
seurat <- seurat.list[1:10]
for (i in 1:length(seurat)) {
seurat[[i]]$age <- as.character(seurat[[i]]$age) %>% as.numeric()
}
phipson
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(Seurat)
howden <- read_rds("output/seurat/Howden_2019_Organoids.rds")
library(DevKidCC)
howden <- DevKidCC(howden, threshold = 0)
DimPlot(howden, group.by = "LineageID")
howden <- DevKidCC(howden, threshold = 0.1)
DimPlot(howden, group.by = "LineageID")
DimPlot(howden, group.by = "DKCC")
howden <- read_rds("output/seurat/Spijker_HNF4A_2019.rds")
howden <- DevKidCC(howden, threshold = 0)
ref <- read_rds("output/seurat/Reference.rds")
table(ref$nCount_RNA>20000)
VlnPlot(ref, features = c("nCount_RNA", "nFeatures_RNA"))
VlnPlot(ref, features = c("nCount_RNA", "nFeature_RNA"))
VlnPlot(ref, features = c("nCount_RNA", "nFeature_RNA")) + geom_hline(yintercept = 20000)
VlnPlot(ref, features = c("nCount_RNA", "nFeature_RNA"), pt.size = 0.1)
VlnPlot(ref, features = c("nCount_RNA", "nFeature_RNA"), pt.size = 0.1) + geom_hline(yintercept = 20000)
VlnPlot(ref, features = c("nCount_RNA"), pt.size = 0.1) + geom_hline(yintercept = 20000)
DimPlot(ref, group.by = ref$nCount_RNA>20000)
DimPlot(ref, group.by = (ref$nCount_RNA>20000))
ref$limit <- ref$nCount_RNA>20000
DimPlot(ref, group.by = "limit")
table(ref$limit, ref$sample)
summary(rowSums(ref@assays$RNA@counts))
summary(colSums(ref@assays$RNA@counts))
head(colSums(ref@assays$RNA@counts))
head((ref@assays$RNA@counts))
reF@assays$RNA@counts[1:4,1:3]
ref@assays$RNA@counts[1:4,1:3]
summary(ref$nCount_RNA)
ref$limit <- ref$nCount_RNA>10000
DimPlot(ref, group.by = "limit")
table(ref$limit, ref$sample)
summary(ref[, ref$limit==T]$nCount_RNA)
table(ref$limit, ref$sample)
VlnPlot(ref, features = c("nCount_RNA"), pt.size = 0.1, group.by = "sample") + geom_hline(yintercept = 20000)
FeatureScatter(ref, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
FeatureScatter(ref, feature1 = "nCount_RNA", feature2 = "nFeature_RNA") + geom_hline(yintercept = 1500) + geom_vline(xintercept = 10000)
FeatureScatter(ref, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", group.by = "sample") + geom_hline(yintercept = 1500) + geom_vline(xintercept = 10000)
VlnPlot(ref, features = c("nCount_RNA"), pt.size = 0.1, group.by = "KidneySegment") + geom_hline(yintercept = 20000)
VlnPlot(ref, features = c("nCount_RNA"), pt.size = 0.1, group.by = "KidneySegments") + geom_hline(yintercept = 20000)
FeatureScatter(ref, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", group.by = "KidneySegments") + geom_hline(yintercept = 1500) + geom_vline(xintercept = 10000)
VlnPlot(ref, features = c("nCount_RNA"), pt.size = 0.1, group.by = "KidneySegments") + geom_hline(yintercept = 20000)
VlnPlot(ref, features = c("nCount_RNA"), pt.size = 0.1, group.by = "KidneySegments") + geom_hline(yintercept = 10000)
ref$limit <- ref$nFeature_RNA>1500
DimPlot(ref, group.by = "limit")
ref$limit <- ref$nFeature_RNA>1500 & ref$nCount_RNA>10000
library(scPred)
subset <- ref[, !is.na(ref$LineageID) & ref$limit==T]
subset
subset <- getFeatureSpace(subset, "LineageID")
subset <- trainModel(subset, allowParallel = T)
model1.all <- scPred::get_scpred(subset)
model1.all.new <- scPred::get_scpred(subset)
rm(model1.all)
model1.all <- DevKidCC::model1.all
howden <- read_rds("output/seurat/Howden_2019_Organoids.rds")
howden.all <- scPredict(howden, reference = model1.all, max.iter.harmony = 0)
howden.all.new <- scPredict(howden, reference = model1.all.new, max.iter.harmony = 0)
DimPlot(howden.all, group.by = "scpred_prediction") | DimPlot(howden.all.new, group.by = "scpred_prediction")
DimPlot(howden.all, group.by = "scpred_prediction") | DimPlot(howden.all.new, group.by = "scpred_prediction")
summary(howden.all.new$scpred_Stroma)
density(howden.all.new$scpred_Stroma)
ggplot(howden.all.new@meta.data) +
geom_boxplot(aes("scpred_Stroma"))
ggplot(howden.all.new@meta.data) +
geom_boxplot(aes(scpred_Stroma))
ggplot(howden.all.new@meta.data) +
geom_point(aes(scpred_Stroma))
ggplot(howden.all.new@meta.data) +
geom_jitter(aes(scpred_Stroma))
ggplot(howden.all.new@meta.data) +
geom_jitter(aes(sample, scpred_Stroma))
ggplot(howden.all.new@meta.data) +
geom_jitter(aes(orig.ident, scpred_Stroma))
ggplot(howden.all@meta.data) +
geom_jitter(aes(orig.ident, scpred_Stroma))
ggplot(howden.all.new@meta.data) +
geom_jitter(aes(orig.ident, scpred_Stroma))
ggplot(howden.all@meta.data) +
geom_jitter(aes(orig.ident, scpred_NPC)) |
ggplot(howden.all.new@meta.data) +
geom_jitter(aes(orig.ident, scpred_NPC))
ggplot(howden.all@meta.data) +
geom_jitter(aes(orig.ident, scpred_Nephron)) |
ggplot(howden.all.new@meta.data) +
geom_jitter(aes(orig.ident, scpred_Nephron))
ggplot(howden.all@meta.data) +
geom_jitter(aes(orig.ident, scpred_Endo)) |
ggplot(howden.all.new@meta.data) +
geom_jitter(aes(orig.ident, scpred_Endo))
ggplot(howden.all@meta.data) +
geom_jitter(aes(orig.ident, scpred_Stroma)) |
ggplot(howden.all.new@meta.data) +
geom_jitter(aes(orig.ident, scpred_Stroma))
uch <- read_rds("output/seurat/Uchimura_uch.rds")
uch.all <- scPredict(uch, reference = model1.all, max.iter.harmony = 0)
uch.all.new <- scPredict(uch, reference = model1.all.new, max.iter.harmony = 0)
ggplot(uch.all@meta.data) +
geom_jitter(aes(orig.ident, scpred_Stroma)) |
ggplot(uch.all.new@meta.data) +
geom_jitter(aes(orig.ident, scpred_Stroma))
DimPlot(uch.all, group.by = "scpred_prediction") | DimPlot(uch.all.new, group.by = "scpred_prediction")
ggplot(uch.all@meta.data) +
geom_jitter(aes(orig.ident, scpred_UrEp)) |
ggplot(uch.all.new@meta.data) +
geom_jitter(aes(orig.ident, scpred_UrEp))
ggplot(uch.all@meta.data) +
geom_jitter(aes(orig.ident, scpred_Nephron)) |
ggplot(uch.all.new@meta.data) +
geom_jitter(aes(orig.ident, scpred_Nephron))
uch.all <- scPredict(uch, reference = model1.all, max.iter.harmony = 1)
uch.all.new <- scPredict(uch, reference = model1.all.new, max.iter.harmony = 1)
ggplot(uch.all@meta.data) +
geom_jitter(aes(orig.ident, scpred_Nephron)) |
ggplot(uch.all.new@meta.data) +
geom_jitter(aes(orig.ident, scpred_Nephron))
ggplot(uch.all@meta.data) +
geom_jitter(aes(orig.ident, scpred_UrEp)) |
ggplot(uch.all.new@meta.data) +
geom_jitter(aes(orig.ident, scpred_UrEp))
table(uch$nCount_RNA>10000)
VlnPlot(uch, features = c("nCount_RNA", "nFeature_RNA"))
VlnPlot(uch, features = c("nCount_RNA", "nFeature_RNA"), pt.size = 0)
FeatureScatter(uch, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
uch$UrEpID
table(uch.all$scpred_prediction, uch.all$nCount_RNA>10000)
table(howden.all.new$scpred_prediction, howden.all.new$nCount_RNA>10000)
table(uch.all$scpred_prediction, uch.all$nCount_RNA>5000)
table(uch.all$scpred_prediction, uch.all$nCount_RNA>2500)
install.packages("simspec")
devtools::install_github("quadbiolab/simspec")
library(simspec)
uch.rss <- ref_sim_spectrum(uch, ref)
model <- cluster_sim_spectrum(uch, label_tag = "orig.ident", return_css_only = F)
model <- cluster_sim_spectrum(ref, label_tag = "sample", return_css_only = F)
model <- cluster_sim_spectrum(ref, label_tag = "sample", return_seuratObj = F)
devtools::install_github('immunogenomics/presto')
devtools::install_github('immunogenomics/presto')
library(presto)
model <- cluster_sim_spectrum(ref, label_tag = "sample", return_seuratObj = F)
#The model is then used to project query data to the same CSS space
seurat_query <- css_project(uch, model)
seurat_query <- RunUMAP(seurat_query, reduction = "css", dims = 1:ncol(Embeddings(seurat, "css")))
seurat_query <- RunUMAP(seurat_query, reduction = "css", dims = 1:ncol(Embeddings(seurat_query, "css")))
1
seurat_query
DimPlot(seurat_query, reduction = "css_proj")
seurat_query@reductions$css_proj@cell.embeddings
DimPlot(seurat_query, reduction = "css_proj")
DimPlot(seurat_query, reduction = "css_proj")
seurat_query <- RunUMAP(seurat_query, reduction = "css_proj", dims = 1:ncol(Embeddings(seurat_query, "css_proj")))
DimPlot(seurat_query, reduction = "umap")
DimPlot(seurat_query, reduction = "umap", group.by = "LineageID")
ggplot(uch.all@meta.data) +
geom_jitter(aes(orig.ident, scpred_UrEp)) |
ggplot(uch.all.new@meta.data) +
geom_jitter(aes(orig.ident, scpred_UrEp))
uch.all.new <- scPredict(uch, reference = model1.all.new, max.iter.harmony = 1, threshold = 0)
seurat_query$scp <- uch.all.new$scpred_prediction
DimPlot(seurat_query, reduction = "umap", group.by = "scp")
uch.all.new <- scPredict(uch, reference = model1.all.new, max.iter.harmony = 0, threshold = 0)
seurat_query$scp <- uch.all.new$scpred_prediction
DimPlot(seurat_query, reduction = "umap", group.by = "scp")
uch.dkcc <- DevKidCC(uch, threshold = 0)
library(Seurat)
library(tidyverse)
load(file = "data/organoid.rda")
organoid$LineageID
organoid$scpred_max
md <- organoid@meta.data
table(md$LineageID)
thresh <- md$scpred_max < 0.2
md[thresh,]
md[thresh,] <- "unassigned"
md[thresh,]
md[thresh,]$LineageID
load(file = "data/organoid.rda")
md <- organoid@meta.data
md[thresh,]$LineageID
md[thresh,]$LineageID <- "unassigned"
md[thresh,]$DKCC <- "unassigned"
table(md$LineageID)
#' @param feature
#' @param show.unassigned
#' @param show.pct
#' @param show.gene.exp
#' @param do.label
#'
#' @return
#' @export
#'
#' @examples
IdentBoxPlot <- function(data, group, identity = "orig.ident", component = "DKCC", feature = "MALAT1", column = T,
show.unassigned = TRUE, show.pct = FALSE, show.gene.exp = FALSE, do.label = T, scales = "free_y"){
data.list <- SplitObject(data, split.by = group)
data.plot <- map2_dfr(data.list, names(data.list), ~GeneSummary(.x, identity = identity, split.by = component, features = feature) %>%
mutate(Group = factor(.y, levels = levels(data@meta.data[, group]))))
myColors <- myColours()
#data.plot <- data.plot %>% filter(Cells>0)
data.plot$Component <- factor(data.plot$Component, levels = names(myColors)[names(myColors) %in% unique(as.character(data.plot$Component))])
if (!is.null(levels(data.plot$Identity))){
data.plot$Identity <- factor(data.plot$Identity, levels = levels(data@meta.data[, identity]))
}
data.plot <- data.plot %>% arrange(desc(Component))
if (show.unassigned == FALSE) {
data.plot <- data.plot %>% filter(Component != "unassigned")
}
myColors <- myColors[levels(data.plot$Component)]
fct.order <- levels(data@meta.data[[identity]])
data.plot <- data.plot %>% mutate(Identity = fct_relevel(Identity, fct.order))
#ymax <- max(map_dbl(unique(data.plot$Identity), ~sum(data.plot %>% filter(Identity==.x) %>% select(Pct))))
#if (show.pct == FALSE){
#  p <- ggplot(data.plot, aes(.data$Identity, .data$Cells))
#
#  if (show.gene.exp == T) {
#    title <- ggtitle(paste0(feature, " expression across ", component))
#    b <- geom_bar(aes(fill = .data$avg.exp.log), stat = "Identity", colour = "black", width = 0.99)
#    max <- max(data.plot %>% filter(features.plot == feature) %>% select(avg.exp.log))
#
#    #c <- scale_fill_gradient2(low = "lightgrey", mid = "navy", high = "red", midpoint = max/2, na.value = "black")
#    c <- scale_fill_gradient2(low = "lightgrey", mid = "red", high = "green", midpoint = max/2, na.value = "black")
#    t <- geom_text(aes(label=ifelse((do.label==T & .data$avg.exp.log >= (max/3)), levels(.data$Component)[.data$Component], "")), size = 3,
#                   position=position_stack(vjust=0.5), colour="black")
#  } else {
#    title <- ggtitle(paste0(component, " cell numbers"))
#    b <- geom_bar(aes(fill = .data$Component), stat = "Identity", colour = "black", width = 0.99)
#    #c <- scale_fill_manual(name = "Identity", values = (myColors[levels(data.plot$Component)]))
#    c <- scale_fill_manual(name = "Identity", values = myColors)
#    t <- geom_text(aes(label=ifelse((do.label==T & .data$Cells >= (ymax/10)), levels(.data$Component)[.data$Component], "")), size = 3,
#                   position=position_stack(vjust=0.5), colour="black")
#  }
#  ymax <- max(map_dbl(unique(data.plot$Identity), ~sum(data.plot %>% filter(Identity==.x) %>% select(Cells))))
#} else {
#   p <- ggplot(data.plot, aes(.data$Component, .data$Pct))
#
#     title <- ggtitle(paste0(component, " cell proportions"))
#     b <- geom_jitter(aes(colour = .data$Group))
#     #c <- scale_fill_manual(name = "Identity", values = (myColors[levels(data.plot$Component)]))
#     #c <- scale_fill_manual(name = "Identity", values = myColors)
#     #t <- geom_text(aes(label=ifelse((do.label==T & .data$Pct >= (ymax/10)), levels(.data$Component)[.data$Component], "")), size = 3,
#     #               position=position_stack(vjust=0.5), colour="black")
#   }
#ymax <- max(map_dbl(unique(data.plot$Identity), ~sum(data.plot %>% filter(Identity==.x) %>% select(Pct))))
# }
ggplot(data.plot, aes(Group, Pct)) +
geom_boxplot(aes(colour = Group), outlier.shape = NA, position = position_dodge(width=1), na.rm = F) +
geom_jitter(aes(colour = Group), position = position_dodge(width = 1)) +
theme(axis.text.x = element_text(angle = -45, hjust = 0, vjust = 0.5)) +
theme(legend.title=element_text(size=rel(1.1))) +
#scale_y_continuous(limits = c(0,ymax+10), expand = c(0, 0)) +
if (column==T){
facet_wrap("Component", ncol = 1, scales = scales)
} else {
facet_wrap("Component", nrow = 1, scales = scales)
}
}
IdentBoxPlot(organoid, "orig.ident")
#' @param data
#' @param identity
#' @param split.by
#' @param features
#' @param group.by
#'
#' @return
#' @export
#'
#' @examples
GeneSummary <-function(data,
identity = "orig.ident",
split.by = "DKCC",
#idents = NULL,
features = rownames(data),
cells = colnames(data),
do.norm = FALSE,
group.by = NULL
){
# gene proportion information
Idents(data) <- identity
df <- as.data.frame(table(data@meta.data[[paste0(identity)]],
data@meta.data[[paste0(split.by)]]))
id <- as.data.frame(table(data[[paste0(identity)]]))
colnames(id) <- c("Identity", "CellTotal")
colnames(df) <- c("Identity", "Component", "Cells")
df <- left_join(df, id, "Identity")
df$Pct <- round((df$Cells / df$CellTotal * 100), digits = 2)
# gene expression information
#cells <- unlist(x = CellsByIdentities(object = data, idents = NULL))
if (do.norm==T){data <- NormalizeData(data)}
data.features <- FetchData(object = data, vars = features,
cells = cells, slot = "data")
data.features$id <- if (is.null(x = group.by)) {
Idents(object = data)[cells, drop = TRUE]
}  else {
data[[group.by, drop = TRUE]][cells, drop = TRUE]
}
if (!is.factor(x = data.features$id)) {
data.features$id <- factor(x = data.features$id)
}
data.features$id <- as.vector(x = data.features$id) #possibly counter productive to previous call but leave it in anyway
splits <- data[[split.by, drop = TRUE]][cells, drop = TRUE]
# rename id to be "sample___identity"
data.features$id <- paste(data.features$id, splits,
sep = "___")
# this function required for next section
PercentAbove <- function(x, threshold) {
return(length(x = x[x > threshold]) / length(x = x))
}
data.plot <- lapply(X = unique(x = data.features$id), FUN = function(ident) {
data.use <- data.features[data.features$id == ident,
1:(ncol(x = data.features) - 1), drop = FALSE]
avg.exp <- apply(X = data.use, MARGIN = 2, FUN = function(x) {
return(mean(x = expm1(x = x)))
})
pct.exp <- apply(X = data.use, MARGIN = 2, FUN = PercentAbove,
threshold = 0)
cell.pct <- apply(X = data.use, MARGIN = 2, FUN = length)
return(list(avg.exp = avg.exp, pct.exp = pct.exp, cell.pct = cell.pct))
})
names(x = data.plot) <- unique(x = data.features$id)
data.plot <- lapply(X = names(x = data.plot), FUN = function(x) {
data.use <- as.data.frame(x = data.plot[[x]])
data.use$features.plot <- rownames(x = data.use)
data.use$id <- x
return(data.use)
})
data.plot <- do.call(what = "rbind", args = data.plot)
if (length(x = unique(x = data.plot$id)) < 3) {
data.transform <- ""
warning("Only less than three identities present, the expression values will be not scaled",
call. = FALSE, immediate. = TRUE)
}
avg.exp.log <- sapply(X = unique(x = data.plot$features.plot),
FUN = function(x) {
data.use <- data.plot[data.plot$features.plot ==
x, "avg.exp"]
data.use <- log1p(x = data.use)
return(data.use)
})
avg.exp.scaled <- sapply(X = unique(x = data.plot$features.plot),
FUN = function(x) {
data.use <- data.plot[data.plot$features.plot ==
x, "avg.exp"]
data.use <- scale(x = data.use)
return(data.use)
})
avg.exp.scaled <- as.vector(x = t(x = avg.exp.scaled))
avg.exp.log <- as.vector(x = t(x = avg.exp.log))
data.plot$avg.exp.scaled <- avg.exp.scaled
data.plot$avg.exp.log <- avg.exp.log
data.plot$features.plot <- factor(x = data.plot$features.plot,
levels = features)
data.plot$pct.exp <- data.plot$pct.exp * 100
if (!is.null(split.by)){
sample.id <- stringr::str_split(data.plot$id, pattern = "___", simplify = T)
data.plot$id <- sample.id[,1]
data.plot$sample <- sample.id[,2]
}
#if (is.null(levels(data@meta.data[[split.by]]))){
#  data.plot$sample <- factor(data.plot$sample, levels = as.character(unique(data@meta.data[[split.by]])))
#} else {
#  data.plot$sample <- factor(data.plot$sample, levels = levels(data@meta.data[[split.by]]))
#}
data.plot <- left_join(df, data.plot, by = c("Component" = "sample", "Identity" = "id")) %>% select(c("Identity", "Component", "Cells", "Pct", "avg.exp", "pct.exp",
"features.plot", "avg.exp.scaled", "avg.exp.log"))
data.plot$Component <- data.plot$Component %>% factor(levels = unique(data.plot$Component))
return(data.plot)
}
#' @param feature
#' @param show.unassigned
#' @param show.pct
#' @param show.gene.exp
#' @param do.label
#'
#' @return
#' @export
#'
#' @examples
IdentBoxPlot <- function(data, group, identity = "orig.ident", component = "DKCC", feature = "MALAT1", column = T,
show.unassigned = TRUE, show.pct = FALSE, show.gene.exp = FALSE, do.label = T, scales = "free_y"){
data.list <- SplitObject(data, split.by = group)
data.plot <- map2_dfr(data.list, names(data.list), ~GeneSummary(.x, identity = identity, split.by = component, features = feature) %>%
mutate(Group = factor(.y, levels = levels(data@meta.data[, group]))))
myColors <- myColours()
#data.plot <- data.plot %>% filter(Cells>0)
data.plot$Component <- factor(data.plot$Component, levels = names(myColors)[names(myColors) %in% unique(as.character(data.plot$Component))])
if (!is.null(levels(data.plot$Identity))){
data.plot$Identity <- factor(data.plot$Identity, levels = levels(data@meta.data[, identity]))
}
data.plot <- data.plot %>% arrange(desc(Component))
if (show.unassigned == FALSE) {
data.plot <- data.plot %>% filter(Component != "unassigned")
}
myColors <- myColors[levels(data.plot$Component)]
fct.order <- levels(data@meta.data[[identity]])
data.plot <- data.plot %>% mutate(Identity = fct_relevel(Identity, fct.order))
#ymax <- max(map_dbl(unique(data.plot$Identity), ~sum(data.plot %>% filter(Identity==.x) %>% select(Pct))))
#if (show.pct == FALSE){
#  p <- ggplot(data.plot, aes(.data$Identity, .data$Cells))
#
#  if (show.gene.exp == T) {
#    title <- ggtitle(paste0(feature, " expression across ", component))
#    b <- geom_bar(aes(fill = .data$avg.exp.log), stat = "Identity", colour = "black", width = 0.99)
#    max <- max(data.plot %>% filter(features.plot == feature) %>% select(avg.exp.log))
#
#    #c <- scale_fill_gradient2(low = "lightgrey", mid = "navy", high = "red", midpoint = max/2, na.value = "black")
#    c <- scale_fill_gradient2(low = "lightgrey", mid = "red", high = "green", midpoint = max/2, na.value = "black")
#    t <- geom_text(aes(label=ifelse((do.label==T & .data$avg.exp.log >= (max/3)), levels(.data$Component)[.data$Component], "")), size = 3,
#                   position=position_stack(vjust=0.5), colour="black")
#  } else {
#    title <- ggtitle(paste0(component, " cell numbers"))
#    b <- geom_bar(aes(fill = .data$Component), stat = "Identity", colour = "black", width = 0.99)
#    #c <- scale_fill_manual(name = "Identity", values = (myColors[levels(data.plot$Component)]))
#    c <- scale_fill_manual(name = "Identity", values = myColors)
#    t <- geom_text(aes(label=ifelse((do.label==T & .data$Cells >= (ymax/10)), levels(.data$Component)[.data$Component], "")), size = 3,
#                   position=position_stack(vjust=0.5), colour="black")
#  }
#  ymax <- max(map_dbl(unique(data.plot$Identity), ~sum(data.plot %>% filter(Identity==.x) %>% select(Cells))))
#} else {
#   p <- ggplot(data.plot, aes(.data$Component, .data$Pct))
#
#     title <- ggtitle(paste0(component, " cell proportions"))
#     b <- geom_jitter(aes(colour = .data$Group))
#     #c <- scale_fill_manual(name = "Identity", values = (myColors[levels(data.plot$Component)]))
#     #c <- scale_fill_manual(name = "Identity", values = myColors)
#     #t <- geom_text(aes(label=ifelse((do.label==T & .data$Pct >= (ymax/10)), levels(.data$Component)[.data$Component], "")), size = 3,
#     #               position=position_stack(vjust=0.5), colour="black")
#   }
#ymax <- max(map_dbl(unique(data.plot$Identity), ~sum(data.plot %>% filter(Identity==.x) %>% select(Pct))))
# }
ggplot(data.plot, aes(Group, Pct)) +
geom_boxplot(aes(colour = Group), outlier.shape = NA, position = position_dodge(width=1), na.rm = F) +
geom_jitter(aes(colour = Group), position = position_dodge(width = 1)) +
theme(axis.text.x = element_text(angle = -45, hjust = 0, vjust = 0.5)) +
theme(legend.title=element_text(size=rel(1.1))) +
#scale_y_continuous(limits = c(0,ymax+10), expand = c(0, 0)) +
if (column==T){
facet_wrap("Component", ncol = 1, scales = scales)
} else {
facet_wrap("Component", nrow = 1, scales = scales)
}
}
IdentBoxPlot(organoid, "orig.ident")
#' myColours
#'
#' @return returns a named vector of colours
#' @export
#'
#' @examples
myColours <- function(){
myColors <- gplots::col2hex(c("grey", "grey",  "royalblue1", "brown", "darkgreen", "green", "skyblue","palevioletred4",
"peachpuff2", "goldenrod", "tan2", "wheat3",
"lightgreen", "palegreen4", "forestgreen", "goldenrod", "tan3", "lightskyblue3", "cyan", "royalblue3", "grey20",
"orchid4", "orchid1", "maroon2", "magenta", "mediumpurple2",
"orangered1", "wheat3", "goldenrod4"
))
#Create a custom color scale
names(myColors) <-  c("OffTarget", "unassigned", "Endo", "Stroma", "NPC-like", "NPC", "Nephron", "UrEp",
"EN", "DN", "PN", "RC",
"EDT", "DT", "LOH", "EPT", "PT", "PEC", "EPod", "Pod", "Nephron_NC",
"SPC", "CS", "MS", "MesS", "Stroma_NC",
"UTip", "UOS", "UIS"
)
return(myColors)
}
IdentBoxPlot(organoid, "orig.ident")
myColours()
