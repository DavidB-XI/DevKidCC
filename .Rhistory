dttold <- read_rds("../UE_Culture_2020/output/BulkSeqRd1_dtt.rds")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, cache = TRUE, cache.lazy = FALSE, dpi = 300)
library(tidyverse)
library(Seurat)
library(RColorBrewer)
library(NMF)
source("../scripts/functions.R")
source("../scripts/general_r_functions.R")
library(patchwork)
vennDiagram(dttold, circle.col = c("green", "red", "blue"), include = c("up", "down"), counts.col = c("red", "blue"), cex = 1, lwd = 2)
dttold
dtt == dtt.old
dtt == dttold
dtt == dttold %>% table()
knitr::opts_chunk$set(echo = FALSE)
raw <- read.csv(file=paste0(dataDir,"../round1/counts/counts.txt"), sep="\t",
stringsAsFactors=FALSE,skip=1, row.names=1)
counts <- raw[,6:ncol(raw)]
targets <- read.csv(file=file.path(projectDir, "SampleSheet.csv"))
targets
dge <- DGEList(counts=counts, genes=rownames(counts), group=targets$Group)
colnames(dge) <- paste(targets$ID,targets$Group,sep=".")
ann <- AnnotationDbi::select(org.Hs.eg.db, keys=rownames(dge), keytype = "SYMBOL",
columns=c("ENTREZID","SYMBOL","GENENAME"))
ann <- ann[!duplicated(ann$SYMBOL),]
dge$genes <- ann[match(rownames(dge),ann$SYMBOL),]
dge$genes$LENGTH <- raw$Length[rownames(raw) %in% rownames(dge)]
data.frame(sample = as.vector(colnames(as.data.frame(dge$counts))),
mCherry = as.data.frame(t((as.data.frame(dge$counts))))$Rep_mCherry,
EPCAM = as.data.frame(t((as.data.frame(dge$counts))))$EPCAM,
GAPDH = as.data.frame(t((as.data.frame(dge$counts))))$GAPDH,
GATA3 = as.data.frame(t((as.data.frame(dge$counts))))$GATA3)
pal = c("green", "blue", "red", "black")   #ggplotColors(length(unique(targets$Group)))
#png(filename = paste0(dataDir, "figs/", "Library_size_PCA.png"), res = 300, units = "mm", width = 300, height = 150)
par(mfrow=c(1,2))
barplot(dge$samples$lib.size, names=targets$ID, las=2, cex.names=0.8,
ylab="Library size (cpm)", col = pal[factor(targets$Group)],
cex.axis=0.5)
plotMDS(dge, col=pal[factor(targets$Group)], gene.selection = "common",
labels=targets$ID)
legend("topright", legend=levels(factor(targets$Group)), text.col=pal)
#dev.off()
# Get log2 counts per million
logcounts <- cpm(dge,log=TRUE)
# Check distributions of samples using boxplots
boxplot(logcounts, xlab="", ylab="Log2 counts per million", las=2)
# Let's add a blue horizontal line that corresponds to the median logCPM
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs (unnormalised)")
# remove genes with very low counts
isexpr <- rowSums(cpm(dge) > 1) >= 3
y <- dge[isexpr,,keep.lib.sizes=FALSE]
y <- calcNormFactors(y)
str(y)
# Get log2 counts per million
logcounts <- cpm(y,log=TRUE)
# Check distributions of samples using boxplots
boxplot(logcounts, xlab="", ylab="Log2 counts per million",las=2)
# Let's add a blue horizontal line that corresponds to the median logCPM
abline(h=median(logcounts),col="blue")
title("Boxplots of logCPMs")
# We estimate the variance for each row in the logcounts matrix
var_genes <- apply(logcounts, 1, var)
# Get the gene names for the top 500 most variable genes
select_var <- names(sort(var_genes, decreasing=TRUE))[1:500]
# Subset logcounts matrix
highly_variable_lcpm <- logcounts[select_var,]
dim(highly_variable_lcpm)
## Get some nicer colours
mypalette <- brewer.pal(11,"RdYlBu")
morecols <- colorRampPalette(mypalette)
# Set up colour vector for celltype variable
# Plot the heatmap
heatmap.2(highly_variable_lcpm,col=rev(morecols(50)),trace="none", main="Top 500 most variable genes across samples")
# set up the design matrix and voom the data
design <- model.matrix(~0+factor(targets$Group))
colnames(design) <- c(levels(factor(targets$Group)))
v <- voom(y, design, plot=TRUE)
# run linear model fit to identify genes that are DE between the groups
fit <- lmFit(v, design)
c.matrix <- makeContrasts(ep.vs.non.ep=0.5*(EPCAM_only+mCh_EPCAM)-mCh_only,
GATA3.ep.vs.neg.ep=mCh_EPCAM-EPCAM_only,
Mat_CD_org.vs.mCh.Ep=MatrigelUBculture-mCh_EPCAM,
levels=design)
fitc <- contrasts.fit(fit, c.matrix)
fit2 <- eBayes(fitc, trend=TRUE, robust=TRUE)
# set cutoffs and summarise number of DE genes for each comparison
dt <- decideTests(fit2)
vennDiagram(dt, circle.col = c("green", "red", "blue"), include = c("up", "down"), counts.col = c("red", "blue"), cex = 1)
fit.treat <- treat(fitc, trend=TRUE, robust=TRUE, lfc=1)
# set cutoffs and summarise number of DE genes for each comparison
dtt <- decideTests(fit.treat)
colnames(dtt@.Data) <- c("ch+/Ep+ org vs ch+", "ch+/Ep+ org vs Ep+", "ch+/Ep+ org vs ch+/Ep+ UE")
vennDiagram(dtt, circle.col = c("green", "red", "blue"), include = c("up", "down"), counts.col = c("red", "blue"), cex = 1, lwd = 2)
vennDiagram(dtt, circle.col = c("green", "red", "blue"), include = c("up", "down"), counts.col = c("red", "blue"), cex = 1, lwd = 2, mar = 2)
vennDiagram(dtt, circle.col = c("green", "red", "blue"), include = c("up", "down"), counts.col = c("red", "blue"), cex = 1, lwd = 2, mar = c(1,1,1,1))
vennDiagram(dtt, circle.col = c("green", "red", "blue"), include = c("up", "down"), counts.col = c("red", "blue"), cex = 1, lwd = 2, mar = c(1,2,3,4))
vennDiagram(dtt, circle.col = c("green", "red", "blue"), include = c("up", "down"), counts.col = c("red", "blue"), cex = 1, lwd = 2, mar = c(0,0,0,0))
vennDiagram(dt, circle.col = c("green", "red", "blue"), include = c("up", "down"), counts.col = c("red", "blue"), cex = 1, lwd=2, mar = c(0,0,0,0))
wflow_build()
wflow_build()
library(tidyverse)
library(Seurat)
library(patchwork)
library(here)
library(plotly)
source("../code/functions.R")
options(future.globals.maxSize = Inf)
knitr::opts_chunk$set(echo = FALSE,
fig.width = 12, fig.height = 9)
wflow_build()
wflow_build()
wflow_build()
wflow_build()
wflow_status()
wflow_build()
wflow_build(files = "analysis/*")
wflow_build(files = "analysis/*.Rmd", update = T)
wflow_publish(message = "Set up initial repo on github")
wflow_publish(files = "analysis/*.Rmd", message = "Set up initial repo on github")
wflow_use_github(username = "sbwilson91")
wflow_git_push(username = "sbwilson91", password = "2dino1poke")
library(tidyverse)
library(Seurat)
library(patchwork)
library(here)
library(plotly)
source("code/functions.R")
source("code/functions.R")
source(here::here("code/functions.R"))
library(tidyverse)
library(Seurat)
library(patchwork)
library(here)
library(plotly)
source(here::here("code/functions.R"))
options(future.globals.maxSize = Inf)
knitr::opts_chunk$set(echo = FALSE,
fig.width = 12, fig.height = 9)
load(file = here::here("data/Holloway2020.rda"))
DimPlot(hfk, group.by = "IdentityRandom", reduction = "umap", label = T, repel = T)
plot_ly(data.frame(cell = colnames(hfk),
umap1 = hfk@reductions$umap3d@cell.embeddings[,1],
umap2 = hfk@reductions$umap3d@cell.embeddings[,2],
umap3 = hfk@reductions$umap3d@cell.embeddings[,3]),
x = ~umap1,
y = ~umap2,
z = ~umap3, type="scatter3d", mode = 'markers',
marker = list(opacity = 0.7, size=2),
color = ~factor(hfk$IdentityRandom))
DimPlot(hfk, group.by = "Broad_Annotation") /
(SWDP.vir(hfk, features = c("XIST", "HBA2", "SOX17", "CD14", "CENPF", "PDGFRB",
"DCN", "FOXD1", "UPK2", "TACSTD2", "AQP2",
"SOX9", "RET", "GATA3", "TMEM52B", "SLC12A3",
"SLC12A1", "UMOD", "MAFB", "NPHS1", "CLDN1",
"CAV1", "HNF4A", "CUBN", "LRP2", "HNF1B",
"JAG1", "WNT4", "LEF1", "LYPD1", "DAPL1",
"CITED1"), group.by = "Broad_Annotation", col.max = 10))
library(tidyverse)
library(Seurat)
library(patchwork)
library(here)
library(plotly)
source(here::here("code/functions.R"))
options(future.globals.maxSize = Inf)
knitr::opts_chunk$set(echo = FALSE,
fig.width = 12, fig.height = 9)
uedn <- hfk[, hfk$Identity %in% c("N.DST", "N.DCT", "N.CS", "U.Tip", "U.Cortical",
"U.Med_Outer", "U.Med_Inner", "N.LoH", "N.Distal_EN")]
ue.dn.list <- list(uedn[, uedn$Sample == "SPENCE_male"],
uedn[, uedn$Sample == "SPENCE_female"])
options(future.globals.maxSize = 10000 * 1024^2)
for (i in 1:length(ue.dn.list)) {
ue.dn.list[[i]] <- SCTransform(ue.dn.list[[i]], verbose = F, vars.to.regress = c("S.Score", "G2M.Score"))
}
ue.dn.list
for (i in 1:length(ue.dn.list)) {
ue.dn.list[[i]] <- SCTransform(ue.dn.list[[i]], verbose = F, vars.to.regress = c("S.Score", "G2M.Score"))
}
ue.dn.list[[i]]
uedn <- hfk[, hfk$Identity %in% c("N.DST", "N.DCT", "N.CS", "U.Tip", "U.Cortical",
"U.Med_Outer", "U.Med_Inner", "N.LoH", "N.Distal_EN")]
ue.dn.list <- list(male = CreateSeuratObject(counts = uedn[, uedn$Sample == "SPENCE_male"]@assays$RNA@counts),
female = CreateSeuratObject(counts = uedn[, uedn$Sample == "SPENCE_female"]@assays$RNA@counts))
options(future.globals.maxSize = 10000 * 1024^2)
for (i in 1:length(ue.dn.list)) {
ue.dn.list[[i]] <- SCTransform(ue.dn.list[[i]], verbose = F,
vars.to.regress = c("S.Score", "G2M.Score"))
}
ue.dn.list
uedn <- hfk[, hfk$Identity %in% c("N.DST", "N.DCT", "N.CS", "U.Tip", "U.Cortical",
"U.Med_Outer", "U.Med_Inner", "N.LoH", "N.Distal_EN")]
ue.dn.list <- list(uedn[, uedn$Sample == "SPENCE_male"],
uedn[, uedn$Sample == "SPENCE_female"])
options(future.globals.maxSize = 10000 * 1024^2)
for (i in 1:length(ue.dn.list)) {
ue.dn.list[[i]] <- SCTransform(ue.dn.list[[i]], verbose = F,
vars.to.regress = c("S.Score", "G2M.Score"))
}
SCTransform(object = ue.dn.list[[1]])
ue.dn.list
a <- ue.dn.list[[1]]
a
class(z)
class(a)
a %>% SCTransform()
devtools::install_github(repo = "satijalab/seurat")
Sys.unsetenv("GITHUB_PAT")
devtools::install_github(repo = "satijalab/seurat")
install.packages("uwot")
install.packages("RcppAnnoy")
Sys.unsetenv("GITHUB_PAT")
devtools::install_github(repo = "satijalab/seurat")
remove.packages("RcppAnnoy", lib="/hpc/software/installed/R/3.6.1/lib64/R/library")
remove.packages("RcppAnnoy", lib="/hpc/software/installed/R/3.6.1/lib64/R/library")
devtools::install_github(repo = "satijalab/seurat")
devtools::install_github(repo = "satijalab/seurat", ref = "release/3.2.0")
devtools::install_github(repo = "satijalab/seurat", ref = "release/4.0.0")
remotes::install_github("jlmelville/uwot")
devtools::install_version(package = 'Seurat', version = package_version('3.2.0'))
library(Seurat)
library(tidyverse)
library(Seurat)
library(patchwork)
library(here)
library(plotly)
source(here::here("code/functions.R"))
options(future.globals.maxSize = Inf)
knitr::opts_chunk$set(echo = FALSE,
fig.width = 12, fig.height = 9)
ue.dn.list[[i]] <- SCTransform(ue.dn.list[[i]], verbose = F,
vars.to.regress = c("S.Score", "G2M.Score"))
library(tidyverse)
library(Seurat)
library(patchwork)
library(here)
library(plotly)
source(here::here("code/functions.R"))
options(future.globals.maxSize = Inf)
knitr::opts_chunk$set(echo = FALSE,
fig.width = 12, fig.height = 9)
source(here::here("code/hfk.R"))
library(tidyverse)
library(Seurat)
library(patchwork)
library(here)
library(plotly)
source(here::here("code/functions.R"))
options(future.globals.maxSize = Inf)
knitr::opts_chunk$set(echo = FALSE,
fig.width = 12, fig.height = 9)
#source(here::here("code/hfk.R"))
load(file = here::here("data/Holloway2020.rda"))
DimPlot(hfk, group.by = "IdentityRandom", reduction = "umap", label = T, repel = T)
plot_ly(data.frame(cell = colnames(hfk),
umap1 = hfk@reductions$umap3d@cell.embeddings[,1],
umap2 = hfk@reductions$umap3d@cell.embeddings[,2],
umap3 = hfk@reductions$umap3d@cell.embeddings[,3]),
x = ~umap1,
y = ~umap2,
z = ~umap3, type="scatter3d", mode = 'markers',
marker = list(opacity = 0.7, size=2),
color = ~factor(hfk$IdentityRandom))
DimPlot(hfk, group.by = "Broad_Annotation") /
(SWDP.vir(hfk, features = c("XIST", "HBA2", "SOX17", "CD14", "CENPF", "PDGFRB",
"DCN", "FOXD1", "UPK2", "TACSTD2", "AQP2",
"SOX9", "RET", "GATA3", "TMEM52B", "SLC12A3",
"SLC12A1", "UMOD", "MAFB", "NPHS1", "CLDN1",
"CAV1", "HNF4A", "CUBN", "LRP2", "HNF1B",
"JAG1", "WNT4", "LEF1", "LYPD1", "DAPL1",
"CITED1"), group.by = "Broad_Annotation", col.max = 10))
uedn <- hfk[, hfk$Identity %in% c("N.DST", "N.DCT", "N.CS", "U.Tip", "U.Cortical",
"U.Med_Outer", "U.Med_Inner", "N.LoH", "N.Distal_EN")]
ue.dn.list <- list(uedn[, uedn$Sample == "SPENCE_male"],
uedn[, uedn$Sample == "SPENCE_female"])
options(future.globals.maxSize = 10000 * 1024^2)
for (i in 1:length(ue.dn.list)) {
ue.dn.list[[i]] <- SCTransform(ue.dn.list[[i]], verbose = F,
vars.to.regress = c("S.Score", "G2M.Score"))
}
devtools::install_version(package = 'Seurat', version = package_version('3.2.2'))
ue.dn <- read_rds(here::here("output/seurat/UE_DN_Subset_recluster.rds"))
ue.dn <- read_rds(here::here("output/seurat/UE_DN_Subset_recluster.rds"))
ue.dn <- read_rds(here::here("../UE_Culture_2020/output/seurat/UE_DN_Subset_recluster.rds"))
ue.dn
library(tidyverse)
library(Seurat)
library(patchwork)
library(here)
library(plotly)
source(here::here("code/functions.R"))
options(future.globals.maxSize = Inf)
knitr::opts_chunk$set(echo = FALSE,
fig.width = 12, fig.height = 9)
#source(here::here("code/hfk.R"))
load(file = here::here("data/Holloway2020.rda"))
DimPlot(hfk, group.by = "IdentityRandom", reduction = "umap", label = T, repel = T)
plot_ly(data.frame(cell = colnames(hfk),
umap1 = hfk@reductions$umap3d@cell.embeddings[,1],
umap2 = hfk@reductions$umap3d@cell.embeddings[,2],
umap3 = hfk@reductions$umap3d@cell.embeddings[,3]),
x = ~umap1,
y = ~umap2,
z = ~umap3, type="scatter3d", mode = 'markers',
marker = list(opacity = 0.7, size=2),
color = ~factor(hfk$IdentityRandom))
DimPlot(hfk, group.by = "Broad_Annotation") /
(SWDP.vir(hfk, features = c("XIST", "HBA2", "SOX17", "CD14", "CENPF", "PDGFRB",
"DCN", "FOXD1", "UPK2", "TACSTD2", "AQP2",
"SOX9", "RET", "GATA3", "TMEM52B", "SLC12A3",
"SLC12A1", "UMOD", "MAFB", "NPHS1", "CLDN1",
"CAV1", "HNF4A", "CUBN", "LRP2", "HNF1B",
"JAG1", "WNT4", "LEF1", "LYPD1", "DAPL1",
"CITED1"), group.by = "Broad_Annotation", col.max = 10))
ue.dn <- read_rds(here::here("../UE_Culture_2020/output/seurat/UE_DN_Subset_recluster.rds"))
ue.dn
DimPlot(ue.dn, group.by = "Identity", label = T, repel = T) +
theme(legend.position = "none")
wflow_open(files = "analysis/Figures.Rmd")
ue.dn
save(ue.dn, file = "data/UE_DN_Subset.rda", compress = T)
hfk$IdentityRandom
DimPlot(ue.dn, group.by = "IdentityRandom", pt.size = 2) +
theme(legend.position = "none",
axis.title = element_blank())
DimPlot(hfk, group.by = "Identity", label = F, pt.size = 1.3,
cols = rev(c(brewer.pal(9, "Set1"), brewer.pal(8, "Set2"), brewer.pal(12, "Set3"))))  +
theme(
axis.title = element_blank())
library(RColorBrewer)
DimPlot(hfk, group.by = "Identity", label = F, pt.size = 1.3,
cols = rev(c(brewer.pal(9, "Set1"), brewer.pal(8, "Set2"), brewer.pal(12, "Set3"))))  +
theme(
axis.title = element_blank())
DimPlot(hfk, group.by = "Identity", label = F, pt.size = 1.3,
cols = rev(c(brewer.pal(9, "Set1"), brewer.pal(8, "Set2"), brewer.pal(12, "Set3"))))  +
theme(
axis.title = element_blank())
DimPlot(hfk, group.by = "Identity", label = F, pt.size = 1.3,
cols = rev(c(brewer.pal(9, "Set1"), brewer.pal(8, "Set2"), brewer.pal(12, "Set3"))))  +
theme(
axis.title = element_blank())
DimPlot(hfk, group.by = "Identity", label = F, pt.size = 1.3,
cols = rev(c(brewer.pal(9, "Set1"), brewer.pal(8, "Set2"), brewer.pal(12, "Set3"))))  +
theme(
axis.title = element_blank())
DimPlot(hfk, group.by = "Identity", label = F, pt.size = 1.3,
cols = rev(c(brewer.pal(9, "Set1"), brewer.pal(8, "Set2"), brewer.pal(12, "Set3"))))  +
theme(
axis.title = element_blank())
DimPlot(hfk, group.by = "Identity", label = F, pt.size = 0.8,
cols = rev(c(brewer.pal(9, "Set1"), brewer.pal(8, "Set2"), brewer.pal(12, "Set3"))))  +
theme(
axis.title = element_blank())
DimPlot(hfk, group.by = "Identity", label = F, pt.size = 0.5,
cols = rev(c(brewer.pal(9, "Set1"), brewer.pal(8, "Set2"), brewer.pal(12, "Set3"))))  +
theme(
axis.title = element_blank())
DimPlot(ue.dn, group.by = "IdentityRandom", label = T, repel = T, label.size = 5) +
theme(legend.position = "none",
axis.title = element_blank())
DimPlot(ue.dn, group.by = "IdentityRandom", label = T, repel = T, label.size = 5) +
theme(legend.position = "none",
axis.title = element_blank())
DimPlot(ue.dn, group.by = "IdentityRandom", label = T, repel = T, label.size = 5) +
theme(legend.position = "none",
axis.title = element_blank())
DimPlot(ue.dn, group.by = "IdentityRandom", label = T, repel = T, label.size = 3) +
theme(legend.position = "none",
axis.title = element_blank())
DimPlot(ue.dn, group.by = "IdentityRandom", label = T, repel = T, label.size = 4) +
theme(legend.position = "none",
axis.title = element_blank())
source(here::here("code/functions.R"))
SWDP.col(ue.dn, features = unique(c("HOXB7", "GATA3", "CALB1", "KRT8", "KRT18", "KRT19", "AQP2",
"CLU", "MAL", "SPP1", "SPINT2", "CDH16")), group.by = "Identity", assay = "RNA", col.max = 10) + theme(legend.position = "none")
ue.dn$Identity <- factor(ue.dn$Identity,
levels = rev(c("N.Distal_EN", "N.LoH", "N.DST", "N.DCT", "N.CS",
"U.Tip", "U.Cortical", "U.Med_Outer", "U.Med_Inner")))
ue.dn <- SetIdent(ue.dn, value = "Identity")
SWDP.col(ue.dn, features = unique(c("HOXB7", "GATA3", "CALB1", "KRT8", "KRT18", "KRT19", "AQP2",
"CLU", "MAL", "SPP1", "SPINT2", "CDH16")), group.by = "Identity", assay = "RNA", col.max = 10) + theme(legend.position = "none")
SWDP.col(ue.dn, features = rev(c("HOXB7", "GATA3", "CALB1", "KRT8", "KRT18", "KRT19", "AQP2",
"CLU", "MAL", "SPP1", "SPINT2", "CDH16")), group.by = "Identity", assay = "RNA", col.max = 10) + theme(legend.position = "none")
SWDP.col(ue.dn, features = unique(c("BSND", "FXYD2", "KCNJ1", "KNG2", "CLCNKB", "CLEC18A",
"KCNN4", "AKR1B7", "ALDH3B2", "WNT9B", "CTNND2", "UPK1B", "AQP2", "RET")
), group.by = "Identity", assay = "RNA", col.max = 10) +
theme(legend.position = "none")
SWDP.col(ue.dn, features = rev(c("BSND", "FXYD2", "KCNJ1", "KNG2", "CLCNKB", "CLEC18A",
"KCNN4", "AKR1B7", "ALDH3B2", "WNT9B", "CTNND2", "UPK1B", "AQP2", "RET")
), group.by = "Identity", assay = "RNA", col.max = 10) +
theme(legend.position = "none")
ue.dn.markers <- FindAllMarkers(ue.dn, only.pos = T, verbose = T, test.use = "t",
logfc.threshold = 0.25, min.pct = 0.5, min.diff.pct = 0.3)
#ue.dn.markers$cluster <- as.character(ue.dn.markers$cluster)
export.markers <- lapply(1:length(unique(ue.dn.markers$cluster)), function(x) {
ue.dn.markers %>%
dplyr::filter(cluster == unique(ue.dn.markers$cluster)[x], p_val_adj < 0.05, avg_logFC > 0) %>%
dplyr::arrange(-avg_logFC) %>%
transmute(Gene = gene, LogFC = avg_logFC, pVal = p_val_adj, pct.diff = pct.1-pct.2)
})
top10 <- ue.dn.markers %>% mutate(pct.diff = pct.1-pct.2) %>%
group_by(cluster) %>% top_n(10, wt = pct.diff) %>% arrange(cluster, -pct.diff)
top5 <- ue.dn.markers %>% mutate(pct.diff = pct.1-pct.2) %>%
group_by(cluster) %>% top_n(5, wt = pct.diff) %>% arrange(cluster, -pct.diff)
(SWDP.col(ue.dn, features = unique(top10$gene[1:40]), group.by = "Identity", assay = "RNA", col.max = 10) +
theme(legend.position = "none")) /
(SWDP.col(ue.dn, features = unique(top10$gene[41:90]), group.by = "Identity", assay = "RNA", col.max = 10))
(SWDP.col(ue.dn, features = unique(top10$gene[1:40]), group.by = "Identity", assay = "RNA", col.max = 10) +
theme(legend.position = "none")) /
(SWDP.col(ue.dn, features = unique(top10$gene[41:90]), group.by = "Identity", assay = "RNA", col.max = 10))
(SWDP.col(ue.dn, features = rev(unique(top10$gene[1:40])), group.by = "Identity", assay = "RNA", col.max = 10) +
theme(legend.position = "none")) /
(SWDP.col(ue.dn, features = rev(unique(top10$gene[41:90])), group.by = "Identity", assay = "RNA", col.max = 10))
(SWDP.col(ue.dn, features = rev(unique(top10$gene[1:40])), group.by = "Identity", assay = "RNA", col.max = 10) +
theme(legend.position = "none")) /
(SWDP.col(ue.dn, features = rev(unique(top10$gene[41:90])), group.by = "Identity", assay = "RNA", col.max = 10))
(SWDP.col(ue.dn, features = rev(unique(top10$gene[1:40])), group.by = "Identity", assay = "RNA", col.max = 10) +
theme(legend.position = "none")) /
(SWDP.col(ue.dn, features = rev(unique(top10$gene[41:90])), group.by = "Identity", assay = "RNA", col.max = 10))
ue.dn$Identity <- factor(ue.dn$Identity,
levels = rev(c("N.Distal_EN", "N.LoH", "N.DST", "N.DCT", "N.CS",
"U.Tip", "U.Cortical", "U.Med_Outer", "U.Med_Inner")))
ue.dn <- SetIdent(ue.dn, value = "Identity")
SWDP.col(ue.dn, features = rev(c("HOXB7", "GATA3", "CALB1", "KRT8", "KRT18", "KRT19", "AQP2",
"CLU", "MAL", "SPP1", "SPINT2", "CDH16")), group.by = "Identity", assay = "RNA", col.max = 10) + theme(legend.position = "none")
ue.dn$Identity <- factor(ue.dn$Identity,
levels = rev(c("N.Distal_EN", "N.LoH", "N.DST", "N.DCT", "N.CS",
"U.Tip", "U.Cortical", "U.Med_Outer", "U.Med_Inner")))
ue.dn <- SetIdent(ue.dn, value = "Identity")
SWDP.col(ue.dn, features = rev(c("HOXB7", "GATA3", "CALB1", "KRT8", "KRT18", "KRT19", "AQP2",
"CLU", "MAL", "SPP1", "SPINT2", "CDH16")), group.by = "Identity", assay = "RNA", col.max = 10) + theme(legend.position = "none")
ue.dn$Identity <- factor(ue.dn$Identity,
levels = rev(c("N.Distal_EN", "N.LoH", "N.DST", "N.DCT", "N.CS",
"U.Tip", "U.Cortical", "U.Med_Outer", "U.Med_Inner")))
ue.dn <- SetIdent(ue.dn, value = "Identity")
SWDP.col(ue.dn, features = rev(c("HOXB7", "GATA3", "CALB1", "KRT8", "KRT18", "KRT19", "AQP2",
"CLU", "MAL", "SPP1", "SPINT2", "CDH16")), group.by = "Identity", assay = "RNA", col.max = 10) + theme(legend.position = "none")
ue.dn$Identity <- factor(ue.dn$Identity,
levels = rev(c("N.Distal_EN", "N.LoH", "N.DST", "N.DCT", "N.CS",
"U.Tip", "U.Cortical", "U.Med_Outer", "U.Med_Inner")))
ue.dn <- SetIdent(ue.dn, value = "Identity")
SWDP.col(ue.dn, features = rev(c("HOXB7", "GATA3", "CALB1", "KRT8", "KRT18", "KRT19", "AQP2",
"CLU", "MAL", "SPP1", "SPINT2", "CDH16")), group.by = "Identity", assay = "RNA", col.max = 10) + theme(legend.position = "none")
SWDP.col(ue.dn, features = rev(c("BSND", "FXYD2", "KCNJ1", "KNG2", "CLCNKB", "CLEC18A",
"KCNN4", "AKR1B7", "ALDH3B2", "WNT9B", "CTNND2", "UPK1B", "AQP2", "RET")
), group.by = "Identity", assay = "RNA", col.max = 10) +
theme(legend.position = "none")
v <- read_rds(here::here("data/BulkSeqRd1_voom.rds"))
v <- read_rds(here::here("data/BulkSeqRd1_voom.rds"))
colnames(v$E) <- c("ch+/Ep+ UE", "ch+/Ep+ UE", "ch+/Ep+ UE",
"ch+/Ep+ org", "ch+/Ep+ org", "ch+/Ep+ org",
"ch+ org", "ch+ org", "ch+ org",
"Ep+ org", "Ep+ org", "Ep+ org")
de.genes <- read_rds(here::here("data/output/BulkSeqRd1_degenes.rds"))
v <- read_rds(here::here("data/BulkSeqRd1_voom.rds"))
colnames(v$E) <- c("ch+/Ep+ UE", "ch+/Ep+ UE", "ch+/Ep+ UE",
"ch+/Ep+ org", "ch+/Ep+ org", "ch+/Ep+ org",
"ch+ org", "ch+ org", "ch+ org",
"Ep+ org", "Ep+ org", "Ep+ org")
de.genes <- read_rds(here::here("data/BulkSeqRd1_degenes.rds"))
de.genes.treat <- read_rds(here::here("data/BulkSeqRd1_degenestreat.rds"))
deUP <- lapply(de.genes.treat, FUN = function(x) x %>% filter(logFC > 0.25, adj.P.Val < 0.05) %>% arrange(logFC))
deDOWN <- lapply(de.genes.treat, FUN = function(x) x %>% filter(logFC < -0.25, adj.P.Val < 0.05) %>% arrange(-logFC))
pal = c("green", "blue", "red", "purple")
targets <- read_rds(here::here("data/BulkSeqRd1_targets.rds"))
dtt <- read_rds(here::here("data/BulkSeqRd1_dtt.rds"))
vcol <- viridis::viridis_pal()(10)
bwr.col <- c("blue", "white", "red")
targets.new$Group[19:30] <- c(rep("ch+/Ep+ UB", 3), rep("ch+/Ep+ org", 3), rep("ch+ org", 3), rep("Ep+ org", 3))
targets
v2 <- read_rds(here::here("data/VoomOutput_BulkSamples.rds"))
targets.new <- read_csv(here::here("data/../output/Targets.csv"))
targets.new <- read_csv(here::here("data/output/Targets.csv"))
targets.new <- read_csv(here::here("data/Targets.csv"))
targets.new
targets.new$ID[1:18] <- c("2 wks_1", "2 wks_2", "2 wks_3", "Psg_1", "Psg_2", "Psg_3", "F/T_1", "F/T_2", "F/T_3", "Stalk_1", "Stalk_2", "Stalk_3",
"NoFacs_1", "NoFacs_2", "NoFacs_3", "3 wks_1","3_wks_2", "3_wks_3")
targets.new
targets.new$ID[1:18] <- c("2 wks_1", "2 wks_2", "2 wks_3", "Psg_1", "Psg_2", "Psg_3", "F/T_1", "F/T_2", "F/T_3", "Stalk_1", "Stalk_2", "Stalk_3",
"NoFacs_1", "NoFacs_2", "NoFacs_3", "3 wks_1","3_wks_2", "3_wks_3")
devtools::check()
library(tidyverse)
devtools::check()
devtools::check()
library(tidyverse)
devtools::check()
devtools::check()
load("data/reference.rda")
rm(reference)
load("/group/kidn1/Group-Little_MCRI/People/Sean/PhD/R-projects/kidney_classification_modelling/data/GeneExpressionList.rda")
#' @param compare.to "reference" or "organoids" will be displayed on the plot as a comparison
#' @param scaling choose "log", "scale" or "raw" to change how the expression values are displayed
#' @param classification choose "DKCC" or "LineageID"
#' @param col.min minimum expression value to plot
#' @param col.max maximum expression value to plot
#'
#' @return
#' @export
#'
# link to rda on googledrive: https://drive.google.com/file/d/1_6L0EKsYcHq2cS7cRK2NM5G6JCEZClW-/view?usp=sharing
LoadGE <- function(){
load(file = "/group/kidn1/Group-Little_MCRI/People/Sean/PhD/R-projects/kidney_classification_modelling/data/GeneExpressionList.rda")
return(GE)
}
LoadGE()
rm(GE)
LoadGE()
devtools::check()
devtools::check()
devtools::build()
devtools::build()
