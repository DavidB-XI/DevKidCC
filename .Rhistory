organoid$LineageID
organoid$scpred_max
md <- organoid@meta.data
table(md$LineageID)
thresh <- md$scpred_max < 0.2
md[thresh,]
md[thresh,] <- "unassigned"
md[thresh,]
md[thresh,]$LineageID
load(file = "data/organoid.rda")
md <- organoid@meta.data
md[thresh,]$LineageID
md[thresh,]$LineageID <- "unassigned"
md[thresh,]$DKCC <- "unassigned"
table(md$LineageID)
#' @param feature
#' @param show.unassigned
#' @param show.pct
#' @param show.gene.exp
#' @param do.label
#'
#' @return
#' @export
#'
#' @examples
IdentBoxPlot <- function(data, group, identity = "orig.ident", component = "DKCC", feature = "MALAT1", column = T,
show.unassigned = TRUE, show.pct = FALSE, show.gene.exp = FALSE, do.label = T, scales = "free_y"){
data.list <- SplitObject(data, split.by = group)
data.plot <- map2_dfr(data.list, names(data.list), ~GeneSummary(.x, identity = identity, split.by = component, features = feature) %>%
mutate(Group = factor(.y, levels = levels(data@meta.data[, group]))))
myColors <- myColours()
#data.plot <- data.plot %>% filter(Cells>0)
data.plot$Component <- factor(data.plot$Component, levels = names(myColors)[names(myColors) %in% unique(as.character(data.plot$Component))])
if (!is.null(levels(data.plot$Identity))){
data.plot$Identity <- factor(data.plot$Identity, levels = levels(data@meta.data[, identity]))
}
data.plot <- data.plot %>% arrange(desc(Component))
if (show.unassigned == FALSE) {
data.plot <- data.plot %>% filter(Component != "unassigned")
}
myColors <- myColors[levels(data.plot$Component)]
fct.order <- levels(data@meta.data[[identity]])
data.plot <- data.plot %>% mutate(Identity = fct_relevel(Identity, fct.order))
#ymax <- max(map_dbl(unique(data.plot$Identity), ~sum(data.plot %>% filter(Identity==.x) %>% select(Pct))))
#if (show.pct == FALSE){
#  p <- ggplot(data.plot, aes(.data$Identity, .data$Cells))
#
#  if (show.gene.exp == T) {
#    title <- ggtitle(paste0(feature, " expression across ", component))
#    b <- geom_bar(aes(fill = .data$avg.exp.log), stat = "Identity", colour = "black", width = 0.99)
#    max <- max(data.plot %>% filter(features.plot == feature) %>% select(avg.exp.log))
#
#    #c <- scale_fill_gradient2(low = "lightgrey", mid = "navy", high = "red", midpoint = max/2, na.value = "black")
#    c <- scale_fill_gradient2(low = "lightgrey", mid = "red", high = "green", midpoint = max/2, na.value = "black")
#    t <- geom_text(aes(label=ifelse((do.label==T & .data$avg.exp.log >= (max/3)), levels(.data$Component)[.data$Component], "")), size = 3,
#                   position=position_stack(vjust=0.5), colour="black")
#  } else {
#    title <- ggtitle(paste0(component, " cell numbers"))
#    b <- geom_bar(aes(fill = .data$Component), stat = "Identity", colour = "black", width = 0.99)
#    #c <- scale_fill_manual(name = "Identity", values = (myColors[levels(data.plot$Component)]))
#    c <- scale_fill_manual(name = "Identity", values = myColors)
#    t <- geom_text(aes(label=ifelse((do.label==T & .data$Cells >= (ymax/10)), levels(.data$Component)[.data$Component], "")), size = 3,
#                   position=position_stack(vjust=0.5), colour="black")
#  }
#  ymax <- max(map_dbl(unique(data.plot$Identity), ~sum(data.plot %>% filter(Identity==.x) %>% select(Cells))))
#} else {
#   p <- ggplot(data.plot, aes(.data$Component, .data$Pct))
#
#     title <- ggtitle(paste0(component, " cell proportions"))
#     b <- geom_jitter(aes(colour = .data$Group))
#     #c <- scale_fill_manual(name = "Identity", values = (myColors[levels(data.plot$Component)]))
#     #c <- scale_fill_manual(name = "Identity", values = myColors)
#     #t <- geom_text(aes(label=ifelse((do.label==T & .data$Pct >= (ymax/10)), levels(.data$Component)[.data$Component], "")), size = 3,
#     #               position=position_stack(vjust=0.5), colour="black")
#   }
#ymax <- max(map_dbl(unique(data.plot$Identity), ~sum(data.plot %>% filter(Identity==.x) %>% select(Pct))))
# }
ggplot(data.plot, aes(Group, Pct)) +
geom_boxplot(aes(colour = Group), outlier.shape = NA, position = position_dodge(width=1), na.rm = F) +
geom_jitter(aes(colour = Group), position = position_dodge(width = 1)) +
theme(axis.text.x = element_text(angle = -45, hjust = 0, vjust = 0.5)) +
theme(legend.title=element_text(size=rel(1.1))) +
#scale_y_continuous(limits = c(0,ymax+10), expand = c(0, 0)) +
if (column==T){
facet_wrap("Component", ncol = 1, scales = scales)
} else {
facet_wrap("Component", nrow = 1, scales = scales)
}
}
IdentBoxPlot(organoid, "orig.ident")
#' @param data
#' @param identity
#' @param split.by
#' @param features
#' @param group.by
#'
#' @return
#' @export
#'
#' @examples
GeneSummary <-function(data,
identity = "orig.ident",
split.by = "DKCC",
#idents = NULL,
features = rownames(data),
cells = colnames(data),
do.norm = FALSE,
group.by = NULL
){
# gene proportion information
Idents(data) <- identity
df <- as.data.frame(table(data@meta.data[[paste0(identity)]],
data@meta.data[[paste0(split.by)]]))
id <- as.data.frame(table(data[[paste0(identity)]]))
colnames(id) <- c("Identity", "CellTotal")
colnames(df) <- c("Identity", "Component", "Cells")
df <- left_join(df, id, "Identity")
df$Pct <- round((df$Cells / df$CellTotal * 100), digits = 2)
# gene expression information
#cells <- unlist(x = CellsByIdentities(object = data, idents = NULL))
if (do.norm==T){data <- NormalizeData(data)}
data.features <- FetchData(object = data, vars = features,
cells = cells, slot = "data")
data.features$id <- if (is.null(x = group.by)) {
Idents(object = data)[cells, drop = TRUE]
}  else {
data[[group.by, drop = TRUE]][cells, drop = TRUE]
}
if (!is.factor(x = data.features$id)) {
data.features$id <- factor(x = data.features$id)
}
data.features$id <- as.vector(x = data.features$id) #possibly counter productive to previous call but leave it in anyway
splits <- data[[split.by, drop = TRUE]][cells, drop = TRUE]
# rename id to be "sample___identity"
data.features$id <- paste(data.features$id, splits,
sep = "___")
# this function required for next section
PercentAbove <- function(x, threshold) {
return(length(x = x[x > threshold]) / length(x = x))
}
data.plot <- lapply(X = unique(x = data.features$id), FUN = function(ident) {
data.use <- data.features[data.features$id == ident,
1:(ncol(x = data.features) - 1), drop = FALSE]
avg.exp <- apply(X = data.use, MARGIN = 2, FUN = function(x) {
return(mean(x = expm1(x = x)))
})
pct.exp <- apply(X = data.use, MARGIN = 2, FUN = PercentAbove,
threshold = 0)
cell.pct <- apply(X = data.use, MARGIN = 2, FUN = length)
return(list(avg.exp = avg.exp, pct.exp = pct.exp, cell.pct = cell.pct))
})
names(x = data.plot) <- unique(x = data.features$id)
data.plot <- lapply(X = names(x = data.plot), FUN = function(x) {
data.use <- as.data.frame(x = data.plot[[x]])
data.use$features.plot <- rownames(x = data.use)
data.use$id <- x
return(data.use)
})
data.plot <- do.call(what = "rbind", args = data.plot)
if (length(x = unique(x = data.plot$id)) < 3) {
data.transform <- ""
warning("Only less than three identities present, the expression values will be not scaled",
call. = FALSE, immediate. = TRUE)
}
avg.exp.log <- sapply(X = unique(x = data.plot$features.plot),
FUN = function(x) {
data.use <- data.plot[data.plot$features.plot ==
x, "avg.exp"]
data.use <- log1p(x = data.use)
return(data.use)
})
avg.exp.scaled <- sapply(X = unique(x = data.plot$features.plot),
FUN = function(x) {
data.use <- data.plot[data.plot$features.plot ==
x, "avg.exp"]
data.use <- scale(x = data.use)
return(data.use)
})
avg.exp.scaled <- as.vector(x = t(x = avg.exp.scaled))
avg.exp.log <- as.vector(x = t(x = avg.exp.log))
data.plot$avg.exp.scaled <- avg.exp.scaled
data.plot$avg.exp.log <- avg.exp.log
data.plot$features.plot <- factor(x = data.plot$features.plot,
levels = features)
data.plot$pct.exp <- data.plot$pct.exp * 100
if (!is.null(split.by)){
sample.id <- stringr::str_split(data.plot$id, pattern = "___", simplify = T)
data.plot$id <- sample.id[,1]
data.plot$sample <- sample.id[,2]
}
#if (is.null(levels(data@meta.data[[split.by]]))){
#  data.plot$sample <- factor(data.plot$sample, levels = as.character(unique(data@meta.data[[split.by]])))
#} else {
#  data.plot$sample <- factor(data.plot$sample, levels = levels(data@meta.data[[split.by]]))
#}
data.plot <- left_join(df, data.plot, by = c("Component" = "sample", "Identity" = "id")) %>% select(c("Identity", "Component", "Cells", "Pct", "avg.exp", "pct.exp",
"features.plot", "avg.exp.scaled", "avg.exp.log"))
data.plot$Component <- data.plot$Component %>% factor(levels = unique(data.plot$Component))
return(data.plot)
}
#' @param feature
#' @param show.unassigned
#' @param show.pct
#' @param show.gene.exp
#' @param do.label
#'
#' @return
#' @export
#'
#' @examples
IdentBoxPlot <- function(data, group, identity = "orig.ident", component = "DKCC", feature = "MALAT1", column = T,
show.unassigned = TRUE, show.pct = FALSE, show.gene.exp = FALSE, do.label = T, scales = "free_y"){
data.list <- SplitObject(data, split.by = group)
data.plot <- map2_dfr(data.list, names(data.list), ~GeneSummary(.x, identity = identity, split.by = component, features = feature) %>%
mutate(Group = factor(.y, levels = levels(data@meta.data[, group]))))
myColors <- myColours()
#data.plot <- data.plot %>% filter(Cells>0)
data.plot$Component <- factor(data.plot$Component, levels = names(myColors)[names(myColors) %in% unique(as.character(data.plot$Component))])
if (!is.null(levels(data.plot$Identity))){
data.plot$Identity <- factor(data.plot$Identity, levels = levels(data@meta.data[, identity]))
}
data.plot <- data.plot %>% arrange(desc(Component))
if (show.unassigned == FALSE) {
data.plot <- data.plot %>% filter(Component != "unassigned")
}
myColors <- myColors[levels(data.plot$Component)]
fct.order <- levels(data@meta.data[[identity]])
data.plot <- data.plot %>% mutate(Identity = fct_relevel(Identity, fct.order))
#ymax <- max(map_dbl(unique(data.plot$Identity), ~sum(data.plot %>% filter(Identity==.x) %>% select(Pct))))
#if (show.pct == FALSE){
#  p <- ggplot(data.plot, aes(.data$Identity, .data$Cells))
#
#  if (show.gene.exp == T) {
#    title <- ggtitle(paste0(feature, " expression across ", component))
#    b <- geom_bar(aes(fill = .data$avg.exp.log), stat = "Identity", colour = "black", width = 0.99)
#    max <- max(data.plot %>% filter(features.plot == feature) %>% select(avg.exp.log))
#
#    #c <- scale_fill_gradient2(low = "lightgrey", mid = "navy", high = "red", midpoint = max/2, na.value = "black")
#    c <- scale_fill_gradient2(low = "lightgrey", mid = "red", high = "green", midpoint = max/2, na.value = "black")
#    t <- geom_text(aes(label=ifelse((do.label==T & .data$avg.exp.log >= (max/3)), levels(.data$Component)[.data$Component], "")), size = 3,
#                   position=position_stack(vjust=0.5), colour="black")
#  } else {
#    title <- ggtitle(paste0(component, " cell numbers"))
#    b <- geom_bar(aes(fill = .data$Component), stat = "Identity", colour = "black", width = 0.99)
#    #c <- scale_fill_manual(name = "Identity", values = (myColors[levels(data.plot$Component)]))
#    c <- scale_fill_manual(name = "Identity", values = myColors)
#    t <- geom_text(aes(label=ifelse((do.label==T & .data$Cells >= (ymax/10)), levels(.data$Component)[.data$Component], "")), size = 3,
#                   position=position_stack(vjust=0.5), colour="black")
#  }
#  ymax <- max(map_dbl(unique(data.plot$Identity), ~sum(data.plot %>% filter(Identity==.x) %>% select(Cells))))
#} else {
#   p <- ggplot(data.plot, aes(.data$Component, .data$Pct))
#
#     title <- ggtitle(paste0(component, " cell proportions"))
#     b <- geom_jitter(aes(colour = .data$Group))
#     #c <- scale_fill_manual(name = "Identity", values = (myColors[levels(data.plot$Component)]))
#     #c <- scale_fill_manual(name = "Identity", values = myColors)
#     #t <- geom_text(aes(label=ifelse((do.label==T & .data$Pct >= (ymax/10)), levels(.data$Component)[.data$Component], "")), size = 3,
#     #               position=position_stack(vjust=0.5), colour="black")
#   }
#ymax <- max(map_dbl(unique(data.plot$Identity), ~sum(data.plot %>% filter(Identity==.x) %>% select(Pct))))
# }
ggplot(data.plot, aes(Group, Pct)) +
geom_boxplot(aes(colour = Group), outlier.shape = NA, position = position_dodge(width=1), na.rm = F) +
geom_jitter(aes(colour = Group), position = position_dodge(width = 1)) +
theme(axis.text.x = element_text(angle = -45, hjust = 0, vjust = 0.5)) +
theme(legend.title=element_text(size=rel(1.1))) +
#scale_y_continuous(limits = c(0,ymax+10), expand = c(0, 0)) +
if (column==T){
facet_wrap("Component", ncol = 1, scales = scales)
} else {
facet_wrap("Component", nrow = 1, scales = scales)
}
}
IdentBoxPlot(organoid, "orig.ident")
#' myColours
#'
#' @return returns a named vector of colours
#' @export
#'
#' @examples
myColours <- function(){
myColors <- gplots::col2hex(c("grey", "grey",  "royalblue1", "brown", "darkgreen", "green", "skyblue","palevioletred4",
"peachpuff2", "goldenrod", "tan2", "wheat3",
"lightgreen", "palegreen4", "forestgreen", "goldenrod", "tan3", "lightskyblue3", "cyan", "royalblue3", "grey20",
"orchid4", "orchid1", "maroon2", "magenta", "mediumpurple2",
"orangered1", "wheat3", "goldenrod4"
))
#Create a custom color scale
names(myColors) <-  c("OffTarget", "unassigned", "Endo", "Stroma", "NPC-like", "NPC", "Nephron", "UrEp",
"EN", "DN", "PN", "RC",
"EDT", "DT", "LOH", "EPT", "PT", "PEC", "EPod", "Pod", "Nephron_NC",
"SPC", "CS", "MS", "MesS", "Stroma_NC",
"UTip", "UOS", "UIS"
)
return(myColors)
}
IdentBoxPlot(organoid, "orig.ident")
myColours()
devtools::check()
.Last.error.trace
renv::status()
devtools::check()
devtools::check()
load("/group/kidn1/Group-Little_MCRI/People/Sean/PhD/R-projects/DevKidCC/data/sample_table.rda")
usethis::use_data(sample_table, overwrite = T, compress = "xz")
devtools::check()
rlang::last_error()
.Last.error
.Last.error.trace
devtools::check()
devtools::build()
devtools::check()
usethis::use_data(sample_table, internal = T, compress = "xz", overwrite = T)
devtools::check()
devtools::check()
tools::checkRdaFiles("data/")
load("/group/kidn1/Group-Little_MCRI/People/Sean/PhD/R-projects/DevKidCC/data.raw/model1_all.rda")
load("/group/kidn1/Group-Little_MCRI/People/Sean/PhD/R-projects/DevKidCC/data.raw/model2_nephron.rda")
load("/group/kidn1/Group-Little_MCRI/People/Sean/PhD/R-projects/DevKidCC/data.raw/model2_stroma.rda")
load("/group/kidn1/Group-Little_MCRI/People/Sean/PhD/R-projects/DevKidCC/data.raw/model2_urep.rda")
load("/group/kidn1/Group-Little_MCRI/People/Sean/PhD/R-projects/DevKidCC/data.raw/model3_dn.rda")
load("/group/kidn1/Group-Little_MCRI/People/Sean/PhD/R-projects/DevKidCC/data.raw/model3_pn.rda")
load("/group/kidn1/Group-Little_MCRI/People/Sean/PhD/R-projects/DevKidCC/data.raw/model3_rc.rda")
map(c(model1.all, model2.nephron, model2.stroma, model2.urep, model3.dn, model3.pn, model3.rc), ~usethis::use_data(.x, internal = T, compress = "xz"))
map(c(model1.all, model2.nephron, model2.stroma, model2.urep, model3.dn, model3.pn, model3.rc, sample_table), ~usethis::use_data(.x, internal = T, compress = "xz", overwrite = T))
usethis::use_data(model1.all, model2.nephron, model2.stroma, model2.urep, model3.dn, model3.pn, model3.rc, sample_table, internal = T, compress = "xz", overwrite = T)
load("/group/kidn1/Group-Little_MCRI/People/Sean/PhD/R-projects/DevKidCC/data.raw/organoid.rda")
load("/group/kidn1/Group-Little_MCRI/People/Sean/PhD/R-projects/DevKidCC/data.raw/reference.rda")
usethis::use_data(organoid, reference, compress="xz")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
View(sample_table)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::load_all()
rm(list = c("model1.all", "model2.nephron", "model2.stroma", "model2.urep", "model3.dn", "model3.pn", "model3.rc", "sample_table"))
devtools::load_all()
ComponentPlot(organoid)
usethis::use_version()
usethis::use_version()
install.packages("pkgdown")
usethis::use_pkgdown()
pkgdown::build_site()
.Last.error.trace
pkgdown::preview_site()
devtools::check()
devtools::check("R/")
pkgdown::build_site()
pkgdown::preview_site()
pkgdown::build_reference_index()
pkgdown::preview_site()
pkgdown::template_reference()
pkgdown::build_reference_index()
pkgdown::preview_site()
pkgdown::build_reference()
pkgdown::build_site()
pkgdown::preview_site()
pkgdown::template_navbar()
pkgdown::preview_site()
pkgdown::preview_site()
pkgdown::preview_site()
pkgdown::template_articles()
pkgdown::template_articles()
pkgdown::preview_site()
pkgdown::preview_site()
pkgdown::preview_site()
pkgdown::template_navbar()
pkgdown::preview_site()
pkgdown::preview_site()
pkgdown::preview_site()
pkgdown::preview_site()
pkgdown::preview_site()
pkgdown::build_reference()
pkgdown::build_site()
pkgdown::template_navbar()
pkgdown::template_navbar()
pkgdown::build_site()
pkgdown::template_reference()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::preview_site()
pkgdown::template_reference()
pkgdown::build_reference()
pkgdown::build_reference()
pkgdown::build_home()
pkgdown::clean_site()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_site()
pkgdown::init_site()
pkgdown::init_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::preview_site()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_reference()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_reference()
pkgdown::preview_site()
pkgdown::template_reference()
pkgdown::build_reference()
pkgdown::build_reference()
pkgdown::build_reference()
pkgdown::build_articles()
rlang::last_error()
library(DevKidCC)
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_articles()
usethis::use_vignette("DKCC_Workflow")
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_articles()
install.packages("pandoc")
BiocManager::install("pandoc")
install.packages("BiocManager")
BiocManager::install("pandoc")
find_pandoc(cache = TRUE, dir = NULL, version = NULL)
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_article()
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_home()
pkgdown::template_articles()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::template_articles()
pkgdown::build_site()
pkgdown::template_navbar()
pkgdown::build_site()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_reference()
pkgdown::build_reference()
pkgdown::build_reference()
pkgdown::build_reference_index()
pkgdown::build_site()
pkgdown::template_navbar()
pkgdown::build_site()
library(DevKidCC)
library(tidyverse)
library(Seurat)
library(rmarkdown)
library(knitr)
knitr::opts_chunk$set(
cache.lazy = FALSE,
cache=TRUE,
collapse = TRUE,
comment = "#>"
)
load("/group/kidn1/Group-Little_MCRI/People/Sean/PhD/R-projects/DevKidCC/data/organoid.rda")
organoid
colnames(organoid@meta.data)
organoid@meta.data[1:5, c(23, 25, 27, 28, 32, 53)]
(DimPlot(organoid, group.by = "LineageID") | DimPlot(organoid, group.by = "DKCC", label = T, repel = T)) /
(FeaturePlot(organoid, features = "scpred_Nephron", order = T) | FeaturePlot(organoid, features = "PAX2", order = T))
pkgdown::build_article(name = "vignettes/Workflow.Rmd")
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_articles()
devtools::build_vignettes()
devtools::build_vignettes()
pkgdown::build_site()
pkgdown::preview_site()
pkgdown::build_articles()
pkgdown::build_home()
pkgdown::preview_site()
pkgdown::preview_site()
pkgdown::build_site()
pkgdown::build_site()
load("/group/kidn1/Group-Little_MCRI/People/Sean/PhD/R-projects/DevKidCC/data.raw/GeneExpressionList.rda")
load("/group/kidn1/Group-Little_MCRI/People/Sean/PhD/R-projects/DevKidCC/R/sysdata.rda")
write_csv(sample_table, "../kidney_classification_modelling/sample_table.csv")
write.csv(sample_table, "../kidney_classification_modelling/sample_table.csv")
library(tidyverse)
sample_data <- read_csv("../kidney_classification_modelling/sample_table.csv")
sample_table <- sample_data
usethis::use_data(sample_table, internal = T)
usethis::use_data(sample_table, internal = T, overwrite = T)
