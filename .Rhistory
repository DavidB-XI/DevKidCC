neph$NephronID <- gsub(pattern = 8, replacement = "DN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 9, replacement = "DN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 11, replacement = "PN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 1, replacement = "PN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 5, replacement = "PN", x = neph$NephronID)
DimPlot(neph, group.by = "NephronID")
neph$NephronID <- gsub(pattern = 6, replacement = NA, x = neph$NephronID)
DimPlot(neph, group.by = "NephronID")
DimPlot(neph, group.by = "RNA_snn_res.0.4", label = T)
table(neph$RNA_snn_res.0.4, neph$SegmentID)
neph <- make.models[, make.models$LineageID == "Nephron"]
neph <- neph %>% RunUMAP(reduction = "harmony", dims = 1:50, seed.use = 250395, min.dist = 0.5)
neph <- FindNeighbors(neph, dims = 1:50, reduction = "harmony")
neph <- FindClusters(neph, resolution = 0.4)
DimPlot(neph, group.by = "RNA_snn_res.0.4", label = T)
neph <- neph[, neph$RNA_snn_res.0.4 %in% c(0:9, 11)]
neph$NephronID <- neph$RNA_snn_res.0.4
neph$NephronID <- gsub(pattern = 0, replacement = "RC", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 4, replacement = "RC", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 7, replacement = "EN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 3, replacement = "EN", x = neph$NephronID)
neph$LineageID <- gsub(pattern = 6, replacement = "NPC", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 6, replacement = NA, x = neph$NephronID)
neph$NephronID <- gsub(pattern = 2, replacement = "DN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 8, replacement = "DN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 9, replacement = "DN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 11, replacement = "PN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 1, replacement = "PN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 5, replacement = "PN", x = neph$NephronID)
DimPlot(neph, group.by = "NephronID")
en <- neph[, neph$NephronID=="EN"]
en$SegmentID <- NA
dn <- neph[, neph$NephronID == "DN"]
dn <- dn[, dn$SegmentID %in% c("EDN", "DT", "LOH")]
pn <- neph[, neph$NephronID == "PN" & neph$SegmentID %in% c("EPN", "PT", "PEC")]
rc <- neph[, neph$NephronID == "RC" & neph$SegmentID %in% c("EPod", "Pod")]
md <- make.models@meta.data
md <-
left_join((md %>% rownames_to_column("cell") %>% select(cell)),
bind_rows(md %>% rownames_to_column("cell") %>% filter(LineageID %!in% c("Nephron")),
en@meta.data %>% rownames_to_column("cell"),
dn@meta.data %>% rownames_to_column("cell"),
pn@meta.data %>% rownames_to_column("cell"),
rc@meta.data %>% rownames_to_column("cell")),
by = "cell")  %>%
column_to_rownames("cell")
md <- md %>% filter(!is.na(LineageID))
md %>% filter(LineageID == "NPC" & !is.na(SegmentID)) %>% rownames() -> remove
make.models <- subset(make.models, cells = (rownames(md)[rownames(md) %!in% remove]))
make.models@meta.data <- md[, c(1:11)]
DimPlot(make.models, group.by = "LineageID")
DimPlot(en, group.by = "LineageID")
DimPlot(neph, group.by = "LineageID")
npc <- neph[, neph$LineageID == "NPC"]
neph <- make.models[, make.models$LineageID == "Nephron"]
neph <- neph %>% RunUMAP(reduction = "harmony", dims = 1:50, seed.use = 250395, min.dist = 0.5)
neph <- FindNeighbors(neph, dims = 1:50, reduction = "harmony")
neph <- FindClusters(neph, resolution = 0.4)
DimPlot(neph, group.by = "RNA_snn_res.0.4", label = T)
neph <- neph[, neph$RNA_snn_res.0.4 %in% c(0:9, 11)]
neph$NephronID <- neph$RNA_snn_res.0.4
neph$NephronID <- gsub(pattern = 0, replacement = "RC", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 4, replacement = "RC", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 7, replacement = "EN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 3, replacement = "EN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 2, replacement = "DN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 8, replacement = "DN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 9, replacement = "DN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 11, replacement = "PN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 1, replacement = "PN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 5, replacement = "PN", x = neph$NephronID)
DimPlot(neph, group.by = "NephronID")
npc <- neph[, neph$LineageID == "NPC"]
npc$NephronID <- NA
npc$LineageID <- "NPC"
en <- neph[, neph$NephronID=="EN"]
en$SegmentID <- NA
dn <- neph[, neph$NephronID == "DN"]
dn <- dn[, dn$SegmentID %in% c("EDN", "DT", "LOH")]
pn <- neph[, neph$NephronID == "PN" & neph$SegmentID %in% c("EPN", "PT", "PEC")]
rc <- neph[, neph$NephronID == "RC" & neph$SegmentID %in% c("EPod", "Pod")]
md <- make.models@meta.data
md <-
left_join((md %>% rownames_to_column("cell") %>% select(cell)),
bind_rows(md %>% rownames_to_column("cell") %>% filter(LineageID %!in% c("Nephron")),
npc@meta.data %>% rownames_to_column("cell"),
en@meta.data %>% rownames_to_column("cell"),
dn@meta.data %>% rownames_to_column("cell"),
pn@meta.data %>% rownames_to_column("cell"),
rc@meta.data %>% rownames_to_column("cell")),
by = "cell")  %>%
column_to_rownames("cell")
md <- md %>% filter(!is.na(LineageID))
md %>% filter(LineageID == "NPC" & !is.na(SegmentID)) %>% rownames() -> remove
make.models <- subset(make.models, cells = (rownames(md)[rownames(md) %!in% remove]))
make.models@meta.data <- md[, c(1:11)]
make.models <- read_rds("output/seurat/NewRef.rds")
make.models <- FindNeighbors(make.models, dims = 1:50, reduction = "harmony")
make.models <- FindClusters(make.models, resolution = 0.15)
DimPlot(make.models, group.by = "RNA_snn_res.0.15", label = T)
make.models <- make.models[, make.models$RNA_snn_res.0.15 != 10]
make.models$LineageID <- make.models$RNA_snn_res.0.15
make.models$LineageID <- gsub(pattern = 2, replacement = "NPC", x = make.models$LineageID)
make.models$LineageID <- gsub(pattern = 4, replacement = "Nephron", x = make.models$LineageID)
make.models$LineageID <- gsub(pattern = 5, replacement = "Nephron", x = make.models$LineageID)
make.models$LineageID <- gsub(pattern = 3, replacement = "Nephron", x = make.models$LineageID)
make.models$LineageID <- gsub(pattern = 0, replacement = "Nephron", x = make.models$LineageID)
make.models$LineageID <- gsub(pattern = 7, replacement = "UrEp", x = make.models$LineageID)
make.models$LineageID <- gsub(pattern = 6, replacement = "Endo", x = make.models$LineageID)
make.models$LineageID <- gsub(pattern = 1, replacement = "Stroma", x = make.models$LineageID)
make.models$LineageID <- gsub(pattern = 8, replacement = "Stroma", x = make.models$LineageID)
make.models$LineageID <- gsub(pattern = 9, replacement = "Stroma", x = make.models$LineageID)
DimPlot(make.models, group.by = "LineageID", label = T)
# Nephron
neph <- make.models[, make.models$LineageID == "Nephron"]
neph <- neph %>% RunUMAP(reduction = "harmony", dims = 1:50, seed.use = 250395, min.dist = 0.5)
neph <- FindNeighbors(neph, dims = 1:50, reduction = "harmony")
neph <- FindClusters(neph, resolution = 0.4)
DimPlot(neph, group.by = "RNA_snn_res.0.4", label = T)
neph <- neph[, neph$RNA_snn_res.0.4 %in% c(0:9, 11)]
neph$NephronID <- neph$RNA_snn_res.0.4
neph$NephronID <- gsub(pattern = 0, replacement = "RC", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 4, replacement = "RC", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 7, replacement = "EN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 3, replacement = "EN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 2, replacement = "DN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 8, replacement = "DN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 9, replacement = "DN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 11, replacement = "PN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 1, replacement = "PN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 5, replacement = "PN", x = neph$NephronID)
DimPlot(neph, group.by = "NephronID")
npc <- neph[, neph$LineageID == "NPC"]
npc$NephronID <- NA
npc$LineageID <- "NPC"
en <- neph[, neph$NephronID=="EN"]
en$SegmentID <- NA
dn <- neph[, neph$NephronID == "DN"]
dn <- dn[, dn$SegmentID %in% c("EDN", "DT", "LOH")]
pn <- neph[, neph$NephronID == "PN" & neph$SegmentID %in% c("EPN", "PT", "PEC")]
rc <- neph[, neph$NephronID == "RC" & neph$SegmentID %in% c("EPod", "Pod")]
md <- make.models@meta.data
md <-
left_join((md %>% rownames_to_column("cell") %>% select(cell)),
bind_rows(md %>% rownames_to_column("cell") %>% filter(LineageID %!in% c("Nephron")),
npc@meta.data %>% rownames_to_column("cell"),
en@meta.data %>% rownames_to_column("cell"),
dn@meta.data %>% rownames_to_column("cell"),
pn@meta.data %>% rownames_to_column("cell"),
rc@meta.data %>% rownames_to_column("cell")),
by = "cell")  %>%
column_to_rownames("cell")
md <- md %>% filter(!is.na(LineageID))
md %>% filter(LineageID == "NPC" & !is.na(SegmentID)) %>% rownames() -> remove
make.models <- subset(make.models, cells = (rownames(md)[rownames(md) %!in% remove]))
make.models@meta.data <- md[, c(1:11)]
make.models <- read_rds("output/seurat/NewRef.rds")
make.models <- FindNeighbors(make.models, dims = 1:50, reduction = "harmony")
make.models <- FindClusters(make.models, resolution = 0.15)
DimPlot(make.models, group.by = "RNA_snn_res.0.15", label = T)
make.models <- make.models[, make.models$RNA_snn_res.0.15 != 10]
make.models$LineageID <- make.models$RNA_snn_res.0.15
make.models$LineageID <- gsub(pattern = 2, replacement = "NPC", x = make.models$LineageID)
make.models$LineageID <- gsub(pattern = 4, replacement = "Nephron", x = make.models$LineageID)
make.models$LineageID <- gsub(pattern = 5, replacement = "Nephron", x = make.models$LineageID)
make.models$LineageID <- gsub(pattern = 3, replacement = "Nephron", x = make.models$LineageID)
make.models$LineageID <- gsub(pattern = 0, replacement = "Nephron", x = make.models$LineageID)
make.models$LineageID <- gsub(pattern = 7, replacement = "UrEp", x = make.models$LineageID)
make.models$LineageID <- gsub(pattern = 6, replacement = "Endo", x = make.models$LineageID)
make.models$LineageID <- gsub(pattern = 1, replacement = "Stroma", x = make.models$LineageID)
make.models$LineageID <- gsub(pattern = 8, replacement = "Stroma", x = make.models$LineageID)
make.models$LineageID <- gsub(pattern = 9, replacement = "Stroma", x = make.models$LineageID)
DimPlot(make.models, group.by = "LineageID", label = T)
neph <- make.models[, make.models$LineageID == "Nephron"]
neph <- neph %>% RunUMAP(reduction = "harmony", dims = 1:50, seed.use = 250395, min.dist = 0.5)
neph <- FindNeighbors(neph, dims = 1:50, reduction = "harmony")
neph <- FindClusters(neph, resolution = 0.4)
DimPlot(neph, group.by = "RNA_snn_res.0.4", label = T)
DimPlot(neph[, neph$RNA_snn_res.0.4 %in% c(0:9, 11)], group.by = "RNA_snn_res.0.4", label = T)
neph <- neph[, neph$RNA_snn_res.0.4 %in% c(0:9, 11)]
FeaturePlot(neph, features = "TMEM100")
neph$NephronID <- gsub(pattern = 0, replacement = "RC", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 4, replacement = "RC", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 7, replacement = "EN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 2, replacement = "EN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 3, replacement = "DN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 8, replacement = "DN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 9, replacement = "DN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 11, replacement = "PN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 1, replacement = "PN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 6, replacement = "PN", x = neph$NephronID)
DimPlot(neph, group.by = "NephronID")
neph$NephronID <- neph$RNA_snn_res.0.4
neph$NephronID <- gsub(pattern = 0, replacement = "RC", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 4, replacement = "RC", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 7, replacement = "EN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 2, replacement = "EN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 3, replacement = "DN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 8, replacement = "DN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 9, replacement = "DN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 11, replacement = "PN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 1, replacement = "PN", x = neph$NephronID)
neph$NephronID <- gsub(pattern = 6, replacement = "PN", x = neph$NephronID)
DimPlot(neph, group.by = "NephronID")
npc <- neph[, neph$NephronID == 5]
npc$NephronID <- NA
npc$LineageID <- "NPC"
en <- neph[, neph$NephronID=="EN"]
en$SegmentID <- NA
dn <- neph[, neph$NephronID == "DN"]
dn <- dn[, dn$SegmentID %in% c("EDN", "DT", "LOH")]
pn <- neph[, neph$NephronID == "PN" & neph$SegmentID %in% c("EPN", "PT", "PEC")]
rc <- neph[, neph$NephronID == "RC" & neph$SegmentID %in% c("EPod", "Pod")]
md <- make.models@meta.data
md <-
left_join((md %>% rownames_to_column("cell") %>% select(cell)),
bind_rows(md %>% rownames_to_column("cell") %>% filter(LineageID %!in% c("Nephron")),
npc@meta.data %>% rownames_to_column("cell"),
en@meta.data %>% rownames_to_column("cell"),
dn@meta.data %>% rownames_to_column("cell"),
pn@meta.data %>% rownames_to_column("cell"),
rc@meta.data %>% rownames_to_column("cell")),
by = "cell")  %>%
column_to_rownames("cell")
md <- md %>% filter(!is.na(LineageID))
md %>% filter(LineageID == "NPC" & !is.na(SegmentID)) %>% rownames() -> remove
make.models <- subset(make.models, cells = (rownames(md)[rownames(md) %!in% remove]))
make.models@meta.data <- md[, c(1:11)]
DimPlot(make.models, group.by = "LineageID")
DimPlot(make.models, group.by = "NephronID")
DimPlot(make.models, group.by = "SegmentIDID")
DimPlot(make.models, group.by = "SegmentID")
write_rds(make.models, "output/seurat/NewRef.rds")
load("/group/kidn1/Group-Little_MCRI/People/Sean/PhD/R-projects/DevKidCC/data/organoid.rda")
devtools::load_all(".")
a
1
devtools::load_all("../DevKidCC/")
howden
howden <- DevKidCC(howden)
DimPlot(howden, group.by = "DKCC")
DimPlot(howden, group.by = "DKCC", label = T)
DimPlot(howden[, howden$NephronID=="EN"], group.by = "DKCC", label = T)
usethis::use_version()
load("/group/kidn1/Group-Little_MCRI/People/Sean/PhD/R-projects/DevKidCC/data/organoid.rda")
library(DevKidCC)
library(tidyverse)
organoid
xaringan:::inf_mr()
organoid <- DevKidCC(organoid)
DimPlot(organoid)
library(Seurat)
DimPlot(organoid, group.by = "LineageID")
colnames(organoid@meta.data)
organoid@meta.data[1:5, 46:52]
organoid@meta.data[1:5, 47:52]
organoid@meta.data[1:5, 47:53]
colnames(organoid@meta.data)
organoid@meta.data[1:5, c(23, 25, 27, 32, 53)]
organoid@meta.data[1:5, c(23, 25, 27, 28, 32, 53)]
(DimPlot(organoid, group.by = "LineageID") | DimPlot(organoid, group.by = "DKCC", label = T, repel = T)) /
(FeaturePlot(organoid, features = "scpred_Nephron", order = T) | FeaturePlot(organoid, features = "PAX2", order = T))
(DimPlot(organoid, group.by = "LineageID") | DimPlot(organoid, group.by = "DKCC", label = T, repel = T)) /
(FeaturePlot(organoid, features = "scpred_Nephron", order = T) | FeaturePlot(organoid, features = "PAX2", order = T))
(DimPlot(organoid, group.by = "LineageID") | DimPlot(organoid, group.by = "DKCC", label = T, repel = T)) /
(FeaturePlot(organoid, features = "scpred_Nephron", order = T) | FeaturePlot(organoid, features = "PAX2", order = T))
1
ComponentPlot(organoid, identity = "sample.id", component = "LineageID", show.pct = T, do.label = T)
table(organoid$orig.ident)
ComponentPlot(organoid, identity = "orig.ident", component = "LineageID", show.pct = T, do.label = T)
ComponentPlot(organoid, identity = "orig.ident", component = "LineageID", show.pct = T, do.label = T, feature = "PAX2")
ComponentPlot(organoid, identity = "orig.ident", component = "LineageID", show.pct = F, do.label = T, feature = "PAX2")
ComponentPlot(organoid, identity = "orig.ident", component = "LineageID", show.pct = T, do.label = T, feature = "PAX2")
ComponentPlot(organoid, identity = "orig.ident", component = "LineageID", show.pct = T, do.label = T, feature = "PAX2")
ComponentPlot(organoid, identity = "orig.ident", component = "LineageID", show.pct = T, do.label = T, feature = "PAX2")
devtools::load_all("../DevKidCC/")
organoid <- DevKidCC(organoid)
colnames(organoid@meta.data)
organoid@meta.data[1:5, c(23, 25, 27, 28, 32, 53)]
(DimPlot(organoid, group.by = "LineageID") | DimPlot(organoid, group.by = "DKCC", label = T, repel = T)) /
(FeaturePlot(organoid, features = "scpred_Nephron", order = T) | FeaturePlot(organoid, features = "PAX2", order = T))
ComponentPlot(organoid, identity = "orig.ident", component = "LineageID", show.pct = T, do.label = T, feature = "PAX2")
ComponentPlot(organoid, identity = "orig.ident", component = "LineageID", show.pct = T, do.label = T, feature = "PAX2") + coord_flip()
ComponentPlot(organoid, identity = "orig.ident", component = "LineageID", show.pct = T, do.label = T, feature = "PAX2") + coord_flip()
ComponentPlot(organoid, identity = "orig.ident", component = "LineageID", show.pct = T, do.label = T, feature = "PAX2", show.gene.exp = T) + coord_flip()
ComponentPlot(organoid, identity = "orig.ident", component = "LineageID", show.pct = T, do.label = T, feature = "PAX2", show.gene.exp = T) + coord_flip()
DotPlotCompare(organoid, features = c("PAX2", "EPCAM", "NPHS1", "COL3A1", "GATA3"))
DotPlotCompare(organoid, features = c("PAX2", "EPCAM", "NPHS1", "COL3A1", "GATA3"), columns = 1)
DotPlotCompare(organoid, features = c("PAX2", "EPCAM", "NPHS1", "COL3A1", "GATA3"), columns = 1)
DotPlotCompare(organoid, features = c("PAX2", "EPCAM", "NPHS1", "COL3A1", "GATA3"), columns = 1, size = "pct.exp")
DotPlotCompare(organoid, features = c("PAX2", "EPCAM", "NPHS1", "COL3A1", "GATA3"), columns = 1, size = "pct.exp", idents = "nephron") |
DotPlotCompare(organoid, features = c("PAX2", "EPCAM", "NPHS1", "COL3A1", "GATA3"), columns = 1, size = "pct.exp", idents = "EPod")
DotPlotCompare(organoid, features = c("PAX2", "EPCAM", "NPHS1", "COL3A1", "GATA3"), columns = 1, size = "pct.exp", idents = "nephron") |
DotPlotCompare(organoid, features = c("PAX2", "EPCAM", "NPHS1", "COL3A1", "GATA3"), columns = 1, size = "pct.exp", idents = "EPod", show = "segment")
DotPlotCompare(organoid, features = c("PAX2", "EPCAM", "NPHS1", "COL3A1", "GATA3"), columns = 1, size = "pct.exp", idents = "nephron") |
DotPlotCompare(organoid, features = c("PAX2", "EPCAM", "NPHS1", "COL3A1", "GATA3"), columns = 1, size = "pct.exp", idents = "EPod", show = "segment")
DotPlotCompare(organoid, features = c("PAX2", "EPCAM", "NPHS1", "COL3A1", "GATA3"), columns = 1, size = "pct.exp", idents = "nephron") |
DotPlotCompare(organoid, features = c("PAX2", "EPCAM", "NPHS1", "COL3A1", "GATA3"), columns = 1, size = "pct.exp", idents = "EPod", show = "segment")
DotPlotCompare(organoid, features = c("PAX2", "EPCAM", "NPHS1", "COL3A1", "GATA3"), columns = 1, size = "pct.exp", idents = "nephron") |
DotPlotCompare(organoid, features = c("PAX2", "EPCAM", "NPHS1", "COL3A1", "GATA3"), columns = 1,
size = "pct.exp", idents = "EPod", show = "segment", dot.scale = 10)
("./data/GeneExpressionList.rda" %in% list.files(path = ".", all.files = T, recursive = T))
reference
reference <- read_csv("../kidney_classification_modelling/output/tables/Reference_GS_All.csv")
DotPlotCompare(organoid, features = c("PAX2", "EPCAM", "NPHS1", "COL3A1", "GATA3"), columns = 1, size = "pct.exp", idents = "nephron") |
DotPlotCompare(organoid, features = c("PAX2", "EPCAM", "NPHS1", "COL3A1", "GATA3"), columns = 1,
size = "pct.exp", idents = "EPod", show = "segment", dot.scale = 10)
DotPlotCompare(organoid, features = c("PAX2", "EPCAM", "NPHS1", "COL3A1", "GATA3"), columns = 1, size = "pct.exp")
usethis::use_data(reference, internal = F, overwrite = T, compress = "xz")
DotPlotCompare(organoid, features = c("PAX2", "EPCAM", "NPHS1", "COL3A1", "GATA3"), compare.to.organoids = T,
columns = 1, size = "pct.exp", idents = "EPod", show = "segment")
columns = 1, size = "pct.exp", idents = "EPod", show = "segment")
DotPlotCompare(organoid, features = c("PAX2", "EPCAM", "NPHS1", "COL3A1", "GATA3"), compare.to.organoids = T,
columns = 1, size = "pct.exp", idents = "EPod", show = "segment")
(here::here("data/GeneExpressionList.rda") %in% list.files(path = ".", all.files = T, recursive = T))
here::here("data/GeneExpressionList.rda")
here::here(".")
here::here()
here::here("data/GeneExpressionList.rda") %in% list.files(path = here::here(), all.files = T, recursive = T))
(here::here("data/GeneExpressionList.rda") %in% list.files(path = here::here(), all.files = T, recursive = T))
(here::here("data/GeneExpressionList.rda")
)
list.files(path = here::here(), all.files = T, recursive = T))
list.files(path = here::here(), all.files = T, recursive = T)
("data/GeneExpressionList.rda" %in% list.files(path = here::here(), all.files = T, recursive = T))
devtools::load_all("../DevKidCC/")
DotPlotCompare(organoid, features = c("PAX2", "EPCAM", "NPHS1", "COL3A1", "GATA3"), compare.to.organoids = T,
columns = 1, size = "pct.exp", idents = "EPod", show = "segment")
devtools::load_all("../DevKidCC/")
DotPlotCompare(organoid, features = c("PAX2", "EPCAM", "NPHS1", "COL3A1", "GATA3"), compare.to.organoids = T,
columns = 1, size = "pct.exp", idents = "EPod", show = "segment")
DotPlotCompare(organoid, features = c("PAX2", "EPCAM", "NPHS1", "COL3A1", "GATA3"), compare.to.organoids = T,
columns = 1, size = "pct.exp", idents = "EPod", show = "segment")
DotPlotCompare(organoid, features = c("PAX2", "EPCAM", "NPHS1", "COL3A1", "GATA3"), compare.to.organoids = T,
columns = 1, size = "pct.exp", idents = "EPod", show = "segment") + coord_flip()
usethis::use_vignette("DevKidCC")
usethis::use_vignette("DevKidCC")
usethis::use_vignette("DevKidCC")
devtools::build_vignettes()
Sys.unsetenv("GITHUB_PAT")
devtools::build_vignettes()
.Last.error.trace
#library(DevKidCC)
devtools::load_all(here::here())
1
organoid <- read_rds("../kidney_classification_modelling/output/seurat/Howden_2019_Organoids.rds")
a <- caret::createDataPartition(organoid@meta.data$Identity, p = 0.1)
a$Resample1
organoid <- organoid[, a$Resample1]
organoid
DimPlot(organoid)
organoid <- FindVariableFeatures(organoid, nfeatures = 5000)
organoid
"MALAT1" %in% organoid@assays$RNA@var.features
DefaultAssay(organoid)
usethis::use_data(organoid, overwrite=T, internal = F, compress = "xz")
#library(DevKidCC)
devtools::load_all(here::here())
library(tidyverse)
library(Seurat)
myColours <- gplots::col2hex(c("grey", "grey",  "royalblue1", "brown", "darkgreen", "green", "skyblue","palevioletred4",
"peachpuff2", "goldenrod", "tan2", "wheat3",
"lightgreen", "palegreen4", "forestgreen", "goldenrod", "tan3", "lightskyblue3", "cyan", "royalblue3", "grey20",
"orchid4", "orchid1", "maroon2", "magenta", "mediumpurple2",
"orangered1", "wheat3", "goldenrod4"
))
#Create a custom color scale
names(myColours) <-  c("OffTarget", "unassigned", "Endo", "Stroma", "NPC-like", "NPC", "Nephron", "UrEp",
"EN", "DN", "PN", "RC",
"EDT", "DT", "LOH", "EPT", "PT", "PEC", "EPod", "Pod", "Nephron_NC",
"SPC", "CS", "MS", "MesS", "Stroma_NC",
"UTip", "UOS", "UIS"
)
SankeyPlot(organoid, origin = "orig.ident")
SankeyPlot(organoid, origin = "orig.ident", simple = F)
SankeyPlot(organoid, origin = "orig.ident", simple = F, width = 500, height = 500)
SankeyPlot(organoid, origin = "orig.ident", simple = F, width = 500, height = 500, remove.unassigned = T)
SankeyPlot(organoid, origin = "orig.ident", simple = F, width = 500, height = 500, LinkGroup = "LineageID")
SankeyPlot(organoid, origin = "orig.ident", simple = F, width = 500, height = 500, LinkGroup = "orig.ident")
SankeyPlot(organoid, origin = "orig.ident", simple = F, width = 500, height = 500, LinkGroup = "Var2")
SankeyPlot(organoid, origin = "orig.ident", simple = F, width = 500, height = 500, LinkGroup = "Var2", nephron.only = T)
SankeyPlot(organoid, origin = "orig.ident", simple = F, width = 500, height = 500, LinkGroup = "Var2", fontsize = 10)
SankeyPlot(organoid, origin = "orig.ident", simple = F, width = 500, height = 500, LinkGroup = "Var2", fontsize = 20)
SankeyPlot(organoid, origin = "orig.ident", simple = F, width = 500, height = 500, LinkGroup = "Var2", fontsize = 15)
SankeyPlot(organoid, origin = "orig.ident", simple = F, width = 500, height = 500, LinkGroup = "Var2", fontsize = 15, sinksRight = F)
SankeyPlot(organoid, origin = "orig.ident", simple = F, width = 500, height = 500, LinkGroup = "Var2", fontsize = 15)
SankeyPlot(organoid, origin = "Identity", simple = F, width = 500, height = 500, LinkGroup = "Var2", fontsize = 15)
SankeyPlot(organoid, origin = "orig.ident")
SankeyPlot(organoid, origin = "orig.ident", end = "DKCC", simple = F, width = 500, height = 500, LinkGroup = "Var2", fontsize = 15)
IdentBoxPlot(organoid, group = "LineageID", identity = "orig.ident")
IdentBoxPlot(organoid, group = "LineageID", identity = "orig.ident", show.pct = T, column = 4)
IdentBoxPlot(organoid, group = "LineageID", identity = "orig.ident", show.pct = T)
IdentBoxPlot(organoid, group = "LineageID", identity = "orig.ident", show.pct = T, column = T)
IdentBoxPlot(organoid, group = "LineageID", identity = "orig.ident", show.pct = T, column = 4)
IdentBoxPlot(organoid, group = "orig.ident", identity = "LineageID", show.pct = T, column = 4)
IdentBoxPlot(organoid, identity = "orig.ident", component = "LineageID", show.pct = T, column = 4)
IdentBoxPlot(organoid, group = "orig.ident", identity = "orig.ident", component = "LineageID", show.pct = T, column = 4)
IdentBoxPlot(organoid, group = "orig.ident", component = "LineageID", show.pct = T, column = 4)
IdentBoxPlot(organoid, group = "orig.ident", component = "LineageID", show.pct = T, column = 4)
IdentBoxPlot(organoid, group = "orig.ident", component = "LineageID", show.pct = T, column = 4)
IdentBoxPlot(organoid, group = "orig.ident", component = "LineageID", show.pct = T, column = 4)
devtools::build_vignettes()
.Last.error.trace
Sys.getenv()
Sys.unsetenv("GITHUB_PAT")
devtools::build_vignettes()
devtools::install_github("KidneyRegeneration/DevKidCC", ref = "main")
devtools::install_github("KidneyRegeneration/DevKidCC", ref = "main")
myColours <- gplots::col2hex(c("grey", "grey",  "royalblue1", "brown", "darkgreen", "green", "skyblue","palevioletred4",
"peachpuff2", "goldenrod", "tan2", "wheat3",
"lightgreen", "palegreen4", "forestgreen", "goldenrod", "tan3", "lightskyblue3", "cyan", "royalblue3", "grey20",
"orchid4", "orchid1", "maroon2", "magenta", "mediumpurple2",
"orangered1", "wheat3", "goldenrod4"
))
#Create a custom color scale
names(myColours) <-  c("OffTarget", "unassigned", "Endo", "Stroma", "NPC-like", "NPC", "Nephron", "UrEp",
"EN", "DN", "PN", "RC",
"EDT", "DT", "LOH", "EPT", "PT", "PEC", "EPod", "Pod", "Nephron_NC",
"SPC", "CS", "MS", "MesS", "Stroma_NC",
"UTip", "UOS", "UIS"
)
myColours
usethis::use_data(myColours, internal = F)
devtools::install_github("KidneyRegeneration/DevKidCC", ref = "main")
devtools::build()
.Last.error.trace
devtools::build(vignettes = F)
devtools::document()
devtools::check()
devtools::check(vignettes = F)
load("/group/kidn1/Group-Little_MCRI/People/Sean/PhD/R-projects/DevKidCC/data/myColours.rda")
class(myColours)
myCol <- function(){}
myCol <- function(){myColors <- gplots::col2hex(c("grey", "grey",  "royalblue1", "brown", "darkgreen", "green", "skyblue","palevioletred4",
"peachpuff2", "goldenrod", "tan2", "wheat3",
"lightgreen", "palegreen4", "forestgreen", "goldenrod", "tan3", "lightskyblue3", "cyan", "royalblue3", "grey20",
"orchid4", "orchid1", "maroon2", "magenta", "mediumpurple2",
"orangered1", "wheat3", "goldenrod4"
))
#Create a custom color scale
names(myColors) <-  c("OffTarget", "unassigned", "Endo", "Stroma", "NPC-like", "NPC", "Nephron", "UrEp",
"EN", "DN", "PN", "RC",
"EDT", "DT", "LOH", "EPT", "PT", "PEC", "EPod", "Pod", "Nephron_NC",
"SPC", "CS", "MS", "MesS", "Stroma_NC",
"UTip", "UOS", "UIS"
) return(myColors)}
myColours <- function(){
myColors <- gplots::col2hex(c("grey", "grey",  "royalblue1", "brown", "darkgreen", "green", "skyblue","palevioletred4",
"peachpuff2", "goldenrod", "tan2", "wheat3",
"lightgreen", "palegreen4", "forestgreen", "goldenrod", "tan3", "lightskyblue3", "cyan", "royalblue3", "grey20",
"orchid4", "orchid1", "maroon2", "magenta", "mediumpurple2",
"orangered1", "wheat3", "goldenrod4"
))
#Create a custom color scale
names(myColors) <-  c("OffTarget", "unassigned", "Endo", "Stroma", "NPC-like", "NPC", "Nephron", "UrEp",
"EN", "DN", "PN", "RC",
"EDT", "DT", "LOH", "EPT", "PT", "PEC", "EPod", "Pod", "Nephron_NC",
"SPC", "CS", "MS", "MesS", "Stroma_NC",
"UTip", "UOS", "UIS"
)
return(myColors)
}
myColours
myColours()
devtools::load_all(".")
library(DevKidCC)
library(tidyverse)
library(Seurat)
(DimPlot(organoid, group.by = "LineageID", cols = myColours) | DimPlot(organoid, group.by = "DKCC", label = T, repel = T, cols = myColours)) /
(FeaturePlot(organoid, features = "scpred_Nephron", order = T) | FeaturePlot(organoid, features = "PAX2", order = T))
(DimPlot(organoid, group.by = "LineageID", cols = myColours()) | DimPlot(organoid, group.by = "DKCC", label = T, repel = T, cols = myColours())) /
(FeaturePlot(organoid, features = "scpred_Nephron", order = T) | FeaturePlot(organoid, features = "PAX2", order = T))
View(myColours)
devtools::install_github("KidneyRegeneration/DevKidCC", ref = "main")
Sys.unsetenv("GITHUB_PAT")
devtools::install_github("KidneyRegeneration/DevKidCC", ref = "main")
DevKidCC::myColours()
DevKidCC::myColours() %>% class()
myColours()
(DimPlot(organoid, group.by = "LineageID", cols = DevKidCC::myColours()) | DimPlot(organoid, group.by = "DKCC", label = T, repel = T, cols = DevKidCC::myColours())) /
(FeaturePlot(organoid, features = "scpred_Nephron", order = T) | FeaturePlot(organoid, features = "PAX2", order = T))
DevKidCC::myColours()
rmarkdown::render("vignettes/DevKidCC.Rmd", output_dir = "vignettes")
library(Seurat)
library(tidyverse)
library(scPred)
library(future)
library(doParallel)
future::nbrOfWorkers() -> workers
plan("multiprocess", workers = workers)
options(future.globals.maxSize = Inf)
project.dir <- "/group/kidn1/Group-Little_MCRI/People/Sean/PhD/R-projects/kidney_classification_modelling/"
set.seed(250395)
'%!in%' <- function(x,y)!('%in%'(x,y))
source(here::here("code/functions/gene_summary.R"))
#------------------- VLH et al. 2020
sample <- read_rds(here::here("output/seurat/LVH_2020_Organoids.rds"))
sample$origin <- "Lawlor_Vanslambrouck_Higgins_2020"
Idents(seurat) <- "sample.id"
sample <- NormalizeData(sample)
df1 <- GeneSummary(sample, split.by = "DKCC", identity = "sample.id")
df1$Tier <- "DKCC"
df1$origin <- "Lawlor_Vansambrouck_Higgins_2020"
write_csv(df1, here::here("output/tables/LVH_GS_DKCC.csv"))
devtools::load_all(here::here())
model1.all
model2.nephron
model2.stroma
model2.urep
model3.dn
model3.pn
model3.rc
