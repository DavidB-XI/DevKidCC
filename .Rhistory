"Pluripotent_1", "Mixed_Nascent_Mesoderm", "Posterior_Nascent_Mesoderm",
"NoGF_Nephrogenic_Mesenchyme", "3c4c_Wnt-driven_Nephrogenic_Mesenchyme",
"5c_Anterior_Nephrogenic_Mesenchyme", "Neurogenesis", "Younger_CellCycle",
"Older_CellCycle", "Pluripotent_2", "Pluripotent_3"))
mono$MonoClass <- mono$SCT_snn_res.0.4
md.mono <- mono@meta.data
md.mono <- left_join(md.mono, cc, by = "MonoClass")
rownames(md.mono) <- colnames(mono)
mono@meta.data <- md.mono
plot.mono <- subset(mono, cells = colnames(mono)[colnames(mono) %in% colnames(fs19)])
plot_ly(data.frame(cell = colnames(plot.mono),
dim1 = plot.mono@reductions$umap@cell.embeddings[,1],
#dim2 = mono@reductions$umap3d@cell.embeddings[,2],
dim3 = plot.mono@reductions$umap@cell.embeddings[,2]),
x = ~dim1,
y = ~dim3,
#z = ~dim3,
type="scatter", mode = 'markers',
marker = list(opacity = 0.7, size=2),
#color = ~factor(ue$Sample))
color = plot.mono$MonoClass_Ann)
plot.mono <- subset(mono, cells = colnames(mono)[colnames(mono) %in% colnames(fs19)])
plot_ly(data.frame(cell = colnames(plot.mono),
dim1 = plot.mono@reductions$umap@cell.embeddings[,1],
#dim2 = mono@reductions$umap3d@cell.embeddings[,2],
dim2 = plot.mono@reductions$umap@cell.embeddings[,2]),
x = ~dim1,
y = ~dim2,
#z = ~dim3,
type="scatter", mode = 'markers',
marker = list(opacity = 0.7, size=2),
#color = ~factor(ue$Sample))
color = plot.mono$MonoClass_Ann)
table(mono$MonoClass, mono$chir)
(ComponentBar(mono, identity = "SCT_snn_res.0.4", component = "condition", show.pct = T) + coord_flip()) +
(StrDotPlot(mono, features = unique((MonoMarkers %>% group_by(cluster) %>% top_n(7, avg_logFC))$gene),
group.by = "SCT_snn_res.0.4") + coord_flip()) +
(StrDotPlot(mono, features = unique((map_df(export.markers, ~(.x %>% top_n(7, -Diff))[, c("cluster", "Gene")]) %>% arrange(-cluster))$Gene),
group.by = "SCT_snn_res.0.4") + coord_flip()) +
patchwork::plot_layout(design = "
aa
bc
bc
bc
bc")
#library(simspec)
#org <- SCTransform(org, vars.to.regress = c("S.Score", "G2M.Score"))
#org <- org %>% RunPCA(npcs=40, verbose=F, reduction.name = "pca")
#org <- org %>% cluster_sim_spectrum(label_tag = "capture", verbose=F)
#
#org <- FindNeighbors(org, reduction = "css", dims = 1:40, assay = "SCT", verbose = F)
#org <- FindClusters(org, resolution = seq(0.1, 0.8, 0.1), random.seed = 250395, verbose = F)
org <- read_rds(here::here("output/rds/org.rds"))
DimPlot(org, group.by = "SCT_snn_res.0.4", label = T) + DimPlot(org, group.by = "age", label = T) +
DimPlot(org, group.by = "LineageID", label = T, cols = myColours()) +
DimPlot(org, group.by = "scpred_no_rejection", label = T, cols = myColours())
library(DevKidCC)
DimPlot(org, group.by = "SCT_snn_res.0.4", label = T) + DimPlot(org, group.by = "age", label = T) +
DimPlot(org, group.by = "LineageID", label = T, cols = myColours()) +
DimPlot(org, group.by = "scpred_no_rejection", label = T, cols = myColours())
source(file = "../DevKidCC/R/visualisation.R")
DimPlot(org, group.by = "SCT_snn_res.0.4", label = T) + DimPlot(org, group.by = "age", label = T) +
DimPlot(org, group.by = "LineageID", label = T, cols = myColours()) +
DimPlot(org, group.by = "scpred_no_rejection", label = T, cols = myColours())
plot_ly(data.frame(cell = colnames(plot.org),
dim1 = plot.org@reductions$umap3d@cell.embeddings[,1],
dim2 = plot.org@reductions$umap3d@cell.embeddings[,2],
dim3 = plot.org@reductions$umap3d@cell.embeddings[,3]),
x = ~dim1,
y = ~dim2,
z = ~dim3,
type="scatter3d", mode = 'markers',
marker = list(opacity = 0.7, size=2),
#color = ~factor(ue$Sample))
color = plot.org$LineageID)
plot.org <- subset(org, cells = colnames(org)[colnames(org) %in% colnames(fs19)])
plot_ly(data.frame(cell = colnames(plot.org),
dim1 = plot.org@reductions$umap3d@cell.embeddings[,1],
dim2 = plot.org@reductions$umap3d@cell.embeddings[,2],
dim3 = plot.org@reductions$umap3d@cell.embeddings[,3]),
x = ~dim1,
y = ~dim2,
z = ~dim3,
type="scatter3d", mode = 'markers',
marker = list(opacity = 0.7, size=2),
#color = ~factor(ue$Sample))
color = plot.org$LineageID)
#write_rds(org, here::here("output/rds/org.rds"))
FeaturePlot(org, c("EPCAM", "SIX1", "CRABP1", "NPHS1", "SIX2", "DAPL1", "LYPD1", "TNNI1", "TUBB2B"), order = T)
FeaturePlot(org, c("EPCAM", "SIX1", "CRABP1", "NPHS1", "SIX2", "DAPL1", "LYPD1", "TNNI1"), ncol = 2, order = T)
DimPlot(org, group.by = "SCT_snn_res.0.4", label = T) + DimPlot(org, group.by = "age", label = T) +
DimPlot(org, group.by = "LineageID", label = T, cols = myColours()) +
DimPlot(org, group.by = "DKCC", label = T, cols = myColours())
library(knitr)
library(rmdformats)
library(tidyverse)
library(Seurat)
library(patchwork)
source(here::here("code/general_r_functions.R"))
source(here::here("code/project_functions.R"))
devtools::load_all(here::here("../SeansKit/"))
library(plotly)
## Global options
options(max.print="500")
opts_chunk$set(echo=FALSE,
cache=FALSE,
cache.lazy = FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.width = 16,
fig.height = 9)
opts_knit$set(width=500)
options(future.globals.maxSize = Inf)
DimPlot(org, group.by = "SCT_snn_res.0.4", label = T) + DimPlot(org, group.by = "age", label = T) +
DimPlot(org, group.by = "LineageID", label = T, cols = myColours()) +
DimPlot(org[, org$LineageID=="Nephron"], group.by = "DKCC", label = T, cols = myColours())
DimPlot(org, group.by = "SCT_snn_res.0.4", label = T) + DimPlot(org, group.by = "age", label = T) +
DimPlot(org, group.by = "LineageID", label = T, cols = myColours()) +
DimPlot(org[, org$LineageID=="Nephron"], group.by = "DKCC", label = T, repel = T, cols = myColours())
DimPlot(org, group.by = "LineageID", label = T, cols = myColours()) +
DimPlot(org[, org$LineageID=="Nephron"], group.by = "DKCC", label = T, repel = T, cols = myColours())
FeaturePlot(org, c("EPCAM", "CRABP1", "NPHS1", "SIX2", "DAPL1", "TNNI1"), ncol = 2, order = T)
FeaturePlot(org, c("EPCAM", "SIX1", "CRABP1", "NPHS1", "SIX2", "DAPL1", "LYPD1", "TNNI1"), ncol = 2, order = T)
DimPlot(org, group.by = "LineageID", label = T, cols = myColours()) +
DimPlot(org[, org$LineageID=="Nephron"], group.by = "DKCC", label = T, repel = T, cols = myColours()) + patchwork::plot_layout(ncol = 1)
DimPlot(org, group.by = "LineageID", label = T, cols = myColours()) +
DimPlot(org[, org$LineageID=="Nephron"], group.by = "DKCC", label = T, repel = T, cols = myColours()) + patchwork::plot_layout(ncol = 1)
DimPlot(org, group.by = "LineageID", label = T, cols = myColours()) +
DimPlot(org[, org$LineageID=="Nephron"], group.by = "DKCC", label = T, repel = T, cols = myColours()) + patchwork::plot_layout(ncol = 1)
DimPlot(org, group.by = "LineageID", label = T, split.by = "CHIR", cols = myColours())
DimPlot(org, group.by = "LineageID", label = T, split.by = "condition", cols = myColours())
DimPlot(org, group.by = "LineageID", label = T, split.by = "condition", cols = myColours(), ncol = 4)
DimPlot(org, group.by = "LineageID", split.by = "gf", cols = myColours(), ncol = 4)
DimPlot(org[, !is.na(org$gf)], group.by = "LineageID", split.by = "gf", cols = myColours(), ncol = 4)
1
org$gf <- gsub("F9G11", "F9.F9G11", org$gf)
org$gf <- gsub("F9.F9", "F9", org$gf)
library(knitr)
library(rmdformats)
library(tidyverse)
library(Seurat)
library(patchwork)
source(here::here("code/general_r_functions.R"))
source(here::here("code/project_functions.R"))
devtools::load_all(here::here("../SeansKit/"))
library(plotly)
## Global options
options(max.print="500")
opts_chunk$set(echo=FALSE,
cache=FALSE,
cache.lazy = FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.width = 16,
fig.height = 9)
opts_knit$set(width=500)
options(future.globals.maxSize = Inf)
DimPlot(org, group.by = "LineageID", split.by = "CHIR", cols = myColours())
DimPlot(org[, !is.na(org$gf)], group.by = "LineageID", split.by = "gf", cols = myColours(), ncol = 4)
org$gf %>% unique()
org$gf <- gsub("F9G11", "F.F9G11", org$gf)
org$gf %>% unique()
org$gf <- gsub("F.F.", "F.", org$gf)
DimPlot(org, group.by = "LineageID", split.by = "CHIR", cols = myColours())
DimPlot(org[, !is.na(org$gf)], group.by = "LineageID", split.by = "gf", cols = myColours(), ncol = 4)
(ComponentBar(org, identity = "SCT_snn_res.0.4", component = "condition", show.pct = T) + coord_flip())
(ComponentBar(org, identity = "SCT_snn_res.0.4", component = "condition", show.pct = T) + coord_flip())
(ComponentBar(org, identity = "CHIR", component = "LineageID", show.pct = T) + coord_flip())
(ComponentBar(org, identity = "CHIR", component = "DKCC", show.pct = T) + coord_flip())
(ComponentBar(org[, org$LineageID=="Nephron"], identity = "CHIR", component = "DKCC", show.pct = T) + coord_flip())
View(ComponentBar)
(ComponentBar(org[, org$LineageID=="Nephron"], identity = "CHIR", component = "DKCC", show.pct = T) + coord_flip())
(ComponentBar(org[, org$LineageID=="Nephron"], identity = "CHIR", component = "DKCC", show.pct = T) + coord_flip())
(ComponentBar(org[, org$LineageID=="Stroma"], identity = "CHIR", component = "DKCC", show.pct = T) + coord_flip())
(ComponentBar(org[, org$LineageID!="Nephron"], identity = "CHIR", component = "DKCC", show.pct = T) + coord_flip())
(ComponentPlot(org[, org$LineageID=="Nephron"], identity = "CHIR", component = "DKCC", show.pct = T) + coord_flip())
(ComponentPlot(org[, org$LineageID=="Nephron"], identity = "CHIR", component = "DKCC", show.pct = T) + coord_flip())
(ComponentPlot(org[, org$LineageID!="Nephron"], identity = "CHIR", component = "DKCC", show.pct = T) + coord_flip())
(ComponentPlot(org, identity = "CHIR", component = "LineageID", show.pct = T) + coord_flip()) -> a
(ComponentPlot(org[, org$LineageID=="Nephron"], identity = "CHIR", component = "DKCC", show.pct = T) + coord_flip()) -> b
(ComponentPlot(org[, org$LineageID!="Nephron"], identity = "CHIR", component = "LineageID", show.pct = T) + coord_flip()) -> c
a
b
c
a
b
c
(ComponentPlot(org[, org$LineageID="Stroma"], identity = "CHIR", component = "LineageID", show.pct = T) + coord_flip()) -> c
(ComponentPlot(org[, org$LineageID=="Stroma"], identity = "CHIR", component = "LineageID", show.pct = T) + coord_flip()) -> c
(ComponentPlot(org[, org$LineageID=="Stroma"], identity = "CHIR", component = "LineageID", show.pct = T) + coord_flip()) -> c
c
(ComponentPlot(org[, org$LineageID=="Stroma"], identity = "CHIR", component = "DKCC", show.pct = T) + coord_flip()) -> c
(ComponentPlot(org[, org$LineageID=="Stroma"], identity = "CHIR", component = "DKCC", show.pct = T) + coord_flip()) -> c
c
(ComponentBar(mono, identity = "SCT_snn_res.0.4", component = "condition", show.pct = T) + coord_flip()) +
(StrDotPlot(mono, features = unique((MonoMarkers %>% group_by(cluster) %>% top_n(7, avg_logFC))$gene),
group.by = "SCT_snn_res.0.4") + coord_flip()) +
(StrDotPlot(mono, features = unique((map_df(export.markers, ~(.x %>% top_n(7, -Diff))[, c("cluster", "Gene")]) %>% arrange(-cluster))$Gene),
group.by = "SCT_snn_res.0.4") + coord_flip()) +
patchwork::plot_layout(design = "
aa
bc
bc
bc
bc")
export.markers <- lapply(1:length(unique(MonoMarkers$cluster)), function(x) {
MonoMarkers %>% group_by(cluster) %>%
dplyr::filter(cluster == unique(MonoMarkers$cluster)[x]) %>%
dplyr::arrange(-avg_logFC) %>% mutate(Gene = gene, Diff = pct.2 - pct.1) %>% select(-gene)
})
#export.markers
#WriteXLS::WriteXLS(export.markers,
#                   ExcelFileName = here::here("output/tables/FS19_Monolayer_CellClass_Markers.xlsx"),
#                   SheetNames = paste0("Cluster_", (0:(length(unique(MonoMarkers$cluster))-1))))
(ComponentBar(mono, identity = "SCT_snn_res.0.4", component = "condition", show.pct = T) + coord_flip()) +
(StrDotPlot(mono, features = unique((MonoMarkers %>% group_by(cluster) %>% top_n(7, avg_logFC))$gene),
group.by = "SCT_snn_res.0.4") + coord_flip()) +
(StrDotPlot(mono, features = unique((map_df(export.markers, ~(.x %>% top_n(7, -Diff))[, c("cluster", "Gene")]) %>% arrange(-cluster))$Gene),
group.by = "SCT_snn_res.0.4") + coord_flip()) +
patchwork::plot_layout(design = "
aa
bc
bc
bc
bc")
(ComponentBar(mono, identity = "SCT_snn_res.0.4", component = "condition", show.pct = T) + coord_flip()) +
(StrDotPlot(mono, features = unique((MonoMarkers %>% group_by(cluster) %>% top_n(3, avg_logFC))$gene),
group.by = "SCT_snn_res.0.4") + coord_flip()) +
(StrDotPlot(mono, features = unique((map_df(export.markers, ~(.x %>% top_n(3, -Diff))[, c("cluster", "Gene")]) %>% arrange(-cluster))$Gene),
group.by = "SCT_snn_res.0.4") + coord_flip()) +
patchwork::plot_layout(design = "
aa
bc
bc
bc
bc")
(ComponentBar(mono, identity = "SCT_snn_res.0.4", component = "condition", show.pct = T) + coord_flip()) +
(StrDotPlot(mono, features = unique((MonoMarkers %>% group_by(cluster) %>% top_n(3, avg_logFC))$gene),
group.by = "SCT_snn_res.0.4") + coord_flip()) +
(StrDotPlot(mono, features = unique((map_df(export.markers, ~(.x %>% top_n(3, -Diff))[, c("cluster", "Gene")]) %>% arrange(-cluster))$Gene),
group.by = "SCT_snn_res.0.4") + coord_flip()) +
patchwork::plot_layout(design = "
aa
bc
bc
")
(ComponentBar(mono, identity = "SCT_snn_res.0.4", component = "condition", show.pct = T) + coord_flip()) +
(StrDotPlot(mono, features = unique((MonoMarkers %>% group_by(cluster) %>% top_n(3, avg_logFC))$gene),
group.by = "SCT_snn_res.0.4") + coord_flip()) +
(StrDotPlot(mono, features = unique((map_df(export.markers, ~(.x %>% top_n(3, -Diff))[, c("cluster", "Gene")]) %>% arrange(-cluster))$Gene),
group.by = "SCT_snn_res.0.4") + coord_flip()) +
patchwork::plot_layout(design = "
aa
bc
bc
bc
")
(ComponentBar(mono, identity = "SCT_snn_res.0.4", component = "condition", show.pct = T) + coord_flip()) +
(StrDotPlot(mono, features = unique((MonoMarkers %>% group_by(cluster) %>% top_n(3, avg_logFC))$gene),
group.by = "SCT_snn_res.0.4") + coord_flip()) +
(StrDotPlot(mono, features = unique((map_df(export.markers, ~(.x %>% top_n(3, -Diff))[, c("cluster", "Gene")]) %>% arrange(-cluster))$Gene),
group.by = "SCT_snn_res.0.4") + coord_flip()) +
patchwork::plot_layout(design = "
aa
bc
bc
")
plot_ly(data.frame(cell = colnames(fs19),
dim1 = fs19@reductions$umap3d@cell.embeddings[,1],
dim2 = fs19@reductions$umap3d@cell.embeddings[,2],
dim3 = fs19@reductions$umap3d@cell.embeddings[,3]),
x = ~dim1,
y = ~dim2,
z = ~dim3, type="scatter3d", mode = 'markers',
marker = list(opacity = 0.7, size=2),
color = fs19$CellClass_Ann)
library(knitr)
library(rmdformats)
library(tidyverse)
library(Seurat)
library(patchwork)
source(here::here("code/general_r_functions.R"))
source(here::here("code/project_functions.R"))
devtools::load_all(here::here("../SeansKit/"))
library(plotly)
## Global options
options(max.print="500")
opts_chunk$set(echo=FALSE,
cache=FALSE,
cache.lazy = FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.width = 16,
fig.height = 9)
opts_knit$set(width=500)
options(future.globals.maxSize = Inf)
plot_ly(data.frame(cell = colnames(fs19),
dim1 = fs19@reductions$umap3d@cell.embeddings[,1],
dim2 = fs19@reductions$umap3d@cell.embeddings[,2],
dim3 = fs19@reductions$umap3d@cell.embeddings[,3]),
x = ~dim1,
y = ~dim2,
z = ~dim3, type="scatter3d", mode = 'markers',
marker = list(opacity = 0.7, size=2),
color = fs19$CellClass_Ann)
library(knitr)
library(rmdformats)
library(tidyverse)
library(Seurat)
library(patchwork)
source(here::here("code/general_r_functions.R"))
source(here::here("code/project_functions.R"))
devtools::load_all(here::here("../SeansKit/"))
library(plotly)
## Global options
options(max.print="500")
opts_chunk$set(echo=FALSE,
cache=FALSE,
cache.lazy = FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.width = 16,
fig.height = 9)
opts_knit$set(width=500)
options(future.globals.maxSize = Inf)
deg <- read_rds(here::here("output/rds/DEG_Markers.rds"))
FS19 <- reloadRDS("FS19")
fs19 <- subset_fs19()
mono <- read_rds(here::here("output/rds/mono.rds"))
org <- read_rds(here::here("output/rds/org.rds"))
# the following code updated the object with some needed information
if ("gf" %in% colnames(FS19@meta.data) == F){
FS19md <- read_csv("/group/kidn1/Group-Little_MCRI/People/Sean/PhD/R-projects/FactorialScreen19/samples.csv")
FS19md$cond_age <- paste0(FS19md$condition, "_", FS19md$age)
md <- FS19@meta.data
#md <- md %>% select(-chir, -gf)
md <- left_join(md, FS19md[, c("cond_age", "chir", "gf")], by = "cond_age")
rownames(md) <- colnames(FS19)
FS19@meta.data <- md
}
FS19@meta.data %>% colnames()
`%!in%` = Negate(`%in%`)
remotes::install_github("KidneyRegeneration/DevKidCC", ref = "main")
remotes::install_github("KidneyRegeneration/DevKidCC", ref = "main")
getwd()
devtools::load_all("../DevKidCC/")
FS19md %>% colnames()
FS19md <- read_csv(here::here("output/tables/FS19_metadata.csv"))
FS19md %>% colnames()
rownames(FS19md)
#md <- md %>% select(-chir, -gf)
rownames(FS19) <- rownames(md)
class(FS19md)
#md <- md %>% select(-chir, -gf)
rownames(FS19md) <- rownames(md)
FS19@meta.data <- FS19md
MultiDimPlot(FS19, cluster.sequence = paste0(seq(0.1, 0.9, 0.1)), reduction = "umap")
MultiDimPlot(FS19, cluster.sequence = paste0(seq(0.1, 0.9, 0.1)), reduction = "umap")
library(knitr)
library(rmdformats)
library(tidyverse)
library(Seurat)
library(patchwork)
source(here::here("code/general_r_functions.R"))
source(here::here("code/project_functions.R"))
devtools::load_all(here::here("../SeansKit/"))
library(plotly)
## Global options
options(max.print="500")
opts_chunk$set(echo=FALSE,
cache=FALSE,
cache.lazy = FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.width = 16,
fig.height = 9)
opts_knit$set(width=500)
options(future.globals.maxSize = Inf)
deg <- read_rds(here::here("output/rds/DEG_Markers.rds"))
FS19 <- reloadRDS("FS19")
fs19 <- subset_fs19()
mono <- read_rds(here::here("output/rds/mono.rds"))
org <- read_rds(here::here("output/rds/org.rds"))
# the following code updated the object with some needed information
if ("gf" %in% colnames(FS19@meta.data) == F){
FS19md <- read_csv("/group/kidn1/Group-Little_MCRI/People/Sean/PhD/R-projects/FactorialScreen19/samples.csv")
FS19md$cond_age <- paste0(FS19md$condition, "_", FS19md$age)
md <- FS19@meta.data
#md <- md %>% select(-chir, -gf)
md <- left_join(md, FS19md[, c("cond_age", "chir", "gf")], by = "cond_age")
rownames(md) <- colnames(FS19)
FS19@meta.data <- md
}
mono
colnames(mono@meta.data)
library(knitr)
library(rmdformats)
library(tidyverse)
library(Seurat)
library(patchwork)
source(here::here("code/general_r_functions.R"))
source(here::here("code/project_functions.R"))
devtools::load_all(here::here("../SeansKit/"))
library(plotly)
## Global options
options(max.print="500")
opts_chunk$set(echo=FALSE,
cache=FALSE,
cache.lazy = FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.width = 16,
fig.height = 9)
opts_knit$set(width=500)
options(future.globals.maxSize = Inf)
deg <- read_rds(here::here("output/rds/DEG_Markers.rds"))
FS19 <- reloadRDS("FS19")
fs19 <- subset_fs19()
mono <- read_rds(here::here("output/rds/mono.rds"))
org <- read_rds(here::here("output/rds/org.rds"))
devtools::load_all("../DevKidCC/")
org <- DKCC(org)
write_rds(org, "output/rds/orgnew.rds")
DimPlot(org, group.by = "DKCC")
DimPlot(org, group.by = "DKCC", label = T, repel = T)
# the following code updated the object with some needed information
if ("SCT_snn_res.0.1" %!in% colnames(FS19@meta.data) == F){
FS19md <- read_csv(here::here("output/tables/FS19_metadata.csv"))
md <- FS19@meta.data
#md <- md %>% select(-chir, -gf)
rownames(FS19md) <- rownames(md)
FS19@meta.data <- FS19md
}
MultiDimPlot(FS19, cluster.sequence = paste0(seq(0.1, 0.9, 0.1)), reduction = "umap")
FS19md <- read_csv(here::here("output/tables/FS19_metadata.csv"))
md <- FS19@meta.data
#md <- md %>% select(-chir, -gf)
rownames(FS19md) <- rownames(md)
FS19@meta.data <- FS19md
MultiDimPlot(FS19, cluster.sequence = paste0(seq(0.1, 0.9, 0.1)), reduction = "umap")
FS19$global_low_res <- FS19$SCT_snn_res.0.1
class(FS19$SCT_snn_res.0.1)
FS19$global_low_res <- as.character(FS19$global_low_res)
org.md <- org@meta.data
org <- FS19[, FS19$age %in% c("12", "13", "14", "27")]
org@meta.data <- org.md
DimPlot(org, group.by = "DKCC", label = T, repel = T)
DimPlot(org, group.by = "capture", label = T, repel = T)
org <- org %>%
SCTransform(vars.to.regress = c("S.Score", "G2M.Score")) %>%
RunPCA(npcs = 1:50, seed.use = 250395) %>%
RunUMAP(dims = 1:50, seed.use = 250395)
org <- org %>%
SCTransform(vars.to.regress = c("S.Score", "G2M.Score")) %>%
RunPCA(npcs = 50, seed.use = 250395) %>%
RunUMAP(dims = 1:50, seed.use = 250395)
DimPlot(org, group.by = "DKCC", repel = T, label = T)
DimPlot(org[, org$DKCC!="unassigned"], group.by = "DKCC", repel = T, label = T)
write_rds(org, here::here("output/rds/org.rds"))
library(knitr)
library(rmdformats)
library(tidyverse)
library(Seurat)
library(patchwork)
source(here::here("code/general_r_functions.R"))
source(here::here("code/project_functions.R"))
devtools::load_all(here::here("../SeansKit/"))
library(plotly)
## Global options
options(max.print="500")
opts_chunk$set(echo=FALSE,
cache=FALSE,
cache.lazy = FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.width = 16,
fig.height = 9)
opts_knit$set(width=500)
options(future.globals.maxSize = Inf)
DimPlot(org, group.by = "DKCC", repel = T, label = T)
org <- RunTSNE(org, dims = 1:50, seed.use = 250395)
DimPlot(org, reduction = "tsne")
DimPlot(org, reduction = "tsne", group.by = "DKCC", repel = T, label = T)
DimPlot(org, reduction = "tsne", group.by = "capture", repel = T, label = T)
ComponentBar(org, identity = "cond_age", component = "DKCC")
DevKidCC::ComponentPlot(org, identity = "cond_age", component = "DKCC")
DevKidCC::ComponentPlot(org, identity = "cond_age", component = "DKCC", show.pct = T) + coord_flip()
DevKidCC::ComponentPlot(org[, org$age!="27"], identity = "condition", component = "DKCC", show.pct = T) + coord_flip()
DevKidCC::ComponentPlot(org[, org$age=="27"], identity = "condition", component = "DKCC", show.pct = T) + coord_flip()
DevKidCC::ComponentPlot(org[, org$age!="27" & org$LineageID=="Nephron"], identity = "condition", component = "DKCC", show.pct = T) + coord_flip()
DevKidCC::ComponentPlot(org[, org$age=="27" & org$LineageID=="Nephron"], identity = "condition", component = "DKCC", show.pct = T) + coord_flip()
